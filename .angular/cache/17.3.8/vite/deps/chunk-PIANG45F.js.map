{
  "version": 3,
  "sources": ["../../../../../node_modules/@firebase/installations/node_modules/idb/build/wrap-idb-value.js", "../../../../../node_modules/@firebase/installations/node_modules/idb/build/index.js", "../../../../../node_modules/@firebase/installations/dist/esm/index.esm2017.js", "../../../../../node_modules/@firebase/remote-config/dist/esm/index.esm2017.js", "../../../../../node_modules/@firebase/messaging/node_modules/idb/build/wrap-idb-value.js", "../../../../../node_modules/@firebase/messaging/node_modules/idb/build/index.js", "../../../../../node_modules/@firebase/messaging/dist/esm/index.esm2017.js", "../../../../../node_modules/@firebase/analytics/dist/esm/index.esm2017.js", "../../../../../node_modules/@angular/fire/fesm2015/angular-fire.js", "../../../../../node_modules/@angular/fire/fesm2015/angular-fire-app.js"],
  "sourcesContent": ["const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst cursorRequestMap = new WeakMap();\nconst transactionDoneMap = new WeakMap();\nconst transactionStoreNamesMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    promise\n        .then((value) => {\n        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval\n        // (see wrapFunction).\n        if (value instanceof IDBCursor) {\n            cursorRequestMap.set(value, request);\n        }\n        // Catching to avoid \"Uncaught Promise exceptions\"\n    })\n        .catch(() => { });\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Polyfill for objectStoreNames because of Edge.\n            if (prop === 'objectStoreNames') {\n                return target.objectStoreNames || transactionStoreNamesMap.get(target);\n            }\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.\n    if (func === IDBDatabase.prototype.transaction &&\n        !('objectStoreNames' in IDBTransaction.prototype)) {\n        return function (storeNames, ...args) {\n            const tx = func.call(unwrap(this), storeNames, ...args);\n            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);\n            return wrap(tx);\n        };\n    }\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(cursorRequestMap.get(this));\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\nexport { reverseTransformCache as a, instanceOfAny as i, replaceTraps as r, unwrap as u, wrap as w };\n", "import { w as wrap, r as replaceTraps } from './wrap-idb-value.js';\nexport { u as unwrap, w as wrap } from './wrap-idb-value.js';\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction));\n        });\n    }\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking)\n            db.addEventListener('versionchange', () => blocking());\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nexport { deleteDB, openDB };\n", "import { _getProvider, getApp, _registerComponent, registerVersion } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport { ErrorFactory, FirebaseError } from '@firebase/util';\nimport { openDB } from 'idb';\n\nconst name = \"@firebase/installations\";\nconst version = \"0.6.4\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst PENDING_TIMEOUT_MS = 10000;\r\nconst PACKAGE_VERSION = `w:${version}`;\r\nconst INTERNAL_AUTH_VERSION = 'FIS_v2';\r\nconst INSTALLATIONS_API_URL = 'https://firebaseinstallations.googleapis.com/v1';\r\nconst TOKEN_EXPIRATION_BUFFER = 60 * 60 * 1000; // One hour\r\nconst SERVICE = 'installations';\r\nconst SERVICE_NAME = 'Installations';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst ERROR_DESCRIPTION_MAP = {\r\n    [\"missing-app-config-values\" /* ErrorCode.MISSING_APP_CONFIG_VALUES */]: 'Missing App configuration value: \"{$valueName}\"',\r\n    [\"not-registered\" /* ErrorCode.NOT_REGISTERED */]: 'Firebase Installation is not registered.',\r\n    [\"installation-not-found\" /* ErrorCode.INSTALLATION_NOT_FOUND */]: 'Firebase Installation not found.',\r\n    [\"request-failed\" /* ErrorCode.REQUEST_FAILED */]: '{$requestName} request failed with error \"{$serverCode} {$serverStatus}: {$serverMessage}\"',\r\n    [\"app-offline\" /* ErrorCode.APP_OFFLINE */]: 'Could not process request. Application offline.',\r\n    [\"delete-pending-registration\" /* ErrorCode.DELETE_PENDING_REGISTRATION */]: \"Can't delete installation while there is a pending registration request.\"\r\n};\r\nconst ERROR_FACTORY = new ErrorFactory(SERVICE, SERVICE_NAME, ERROR_DESCRIPTION_MAP);\r\n/** Returns true if error is a FirebaseError that is based on an error from the server. */\r\nfunction isServerError(error) {\r\n    return (error instanceof FirebaseError &&\r\n        error.code.includes(\"request-failed\" /* ErrorCode.REQUEST_FAILED */));\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction getInstallationsEndpoint({ projectId }) {\r\n    return `${INSTALLATIONS_API_URL}/projects/${projectId}/installations`;\r\n}\r\nfunction extractAuthTokenInfoFromResponse(response) {\r\n    return {\r\n        token: response.token,\r\n        requestStatus: 2 /* RequestStatus.COMPLETED */,\r\n        expiresIn: getExpiresInFromResponseExpiresIn(response.expiresIn),\r\n        creationTime: Date.now()\r\n    };\r\n}\r\nasync function getErrorFromResponse(requestName, response) {\r\n    const responseJson = await response.json();\r\n    const errorData = responseJson.error;\r\n    return ERROR_FACTORY.create(\"request-failed\" /* ErrorCode.REQUEST_FAILED */, {\r\n        requestName,\r\n        serverCode: errorData.code,\r\n        serverMessage: errorData.message,\r\n        serverStatus: errorData.status\r\n    });\r\n}\r\nfunction getHeaders({ apiKey }) {\r\n    return new Headers({\r\n        'Content-Type': 'application/json',\r\n        Accept: 'application/json',\r\n        'x-goog-api-key': apiKey\r\n    });\r\n}\r\nfunction getHeadersWithAuth(appConfig, { refreshToken }) {\r\n    const headers = getHeaders(appConfig);\r\n    headers.append('Authorization', getAuthorizationHeader(refreshToken));\r\n    return headers;\r\n}\r\n/**\r\n * Calls the passed in fetch wrapper and returns the response.\r\n * If the returned response has a status of 5xx, re-runs the function once and\r\n * returns the response.\r\n */\r\nasync function retryIfServerError(fn) {\r\n    const result = await fn();\r\n    if (result.status >= 500 && result.status < 600) {\r\n        // Internal Server Error. Retry request.\r\n        return fn();\r\n    }\r\n    return result;\r\n}\r\nfunction getExpiresInFromResponseExpiresIn(responseExpiresIn) {\r\n    // This works because the server will never respond with fractions of a second.\r\n    return Number(responseExpiresIn.replace('s', '000'));\r\n}\r\nfunction getAuthorizationHeader(refreshToken) {\r\n    return `${INTERNAL_AUTH_VERSION} ${refreshToken}`;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function createInstallationRequest({ appConfig, heartbeatServiceProvider }, { fid }) {\r\n    const endpoint = getInstallationsEndpoint(appConfig);\r\n    const headers = getHeaders(appConfig);\r\n    // If heartbeat service exists, add the heartbeat string to the header.\r\n    const heartbeatService = heartbeatServiceProvider.getImmediate({\r\n        optional: true\r\n    });\r\n    if (heartbeatService) {\r\n        const heartbeatsHeader = await heartbeatService.getHeartbeatsHeader();\r\n        if (heartbeatsHeader) {\r\n            headers.append('x-firebase-client', heartbeatsHeader);\r\n        }\r\n    }\r\n    const body = {\r\n        fid,\r\n        authVersion: INTERNAL_AUTH_VERSION,\r\n        appId: appConfig.appId,\r\n        sdkVersion: PACKAGE_VERSION\r\n    };\r\n    const request = {\r\n        method: 'POST',\r\n        headers,\r\n        body: JSON.stringify(body)\r\n    };\r\n    const response = await retryIfServerError(() => fetch(endpoint, request));\r\n    if (response.ok) {\r\n        const responseValue = await response.json();\r\n        const registeredInstallationEntry = {\r\n            fid: responseValue.fid || fid,\r\n            registrationStatus: 2 /* RequestStatus.COMPLETED */,\r\n            refreshToken: responseValue.refreshToken,\r\n            authToken: extractAuthTokenInfoFromResponse(responseValue.authToken)\r\n        };\r\n        return registeredInstallationEntry;\r\n    }\r\n    else {\r\n        throw await getErrorFromResponse('Create Installation', response);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** Returns a promise that resolves after given time passes. */\r\nfunction sleep(ms) {\r\n    return new Promise(resolve => {\r\n        setTimeout(resolve, ms);\r\n    });\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction bufferToBase64UrlSafe(array) {\r\n    const b64 = btoa(String.fromCharCode(...array));\r\n    return b64.replace(/\\+/g, '-').replace(/\\//g, '_');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst VALID_FID_PATTERN = /^[cdef][\\w-]{21}$/;\r\nconst INVALID_FID = '';\r\n/**\r\n * Generates a new FID using random values from Web Crypto API.\r\n * Returns an empty string if FID generation fails for any reason.\r\n */\r\nfunction generateFid() {\r\n    try {\r\n        // A valid FID has exactly 22 base64 characters, which is 132 bits, or 16.5\r\n        // bytes. our implementation generates a 17 byte array instead.\r\n        const fidByteArray = new Uint8Array(17);\r\n        const crypto = self.crypto || self.msCrypto;\r\n        crypto.getRandomValues(fidByteArray);\r\n        // Replace the first 4 random bits with the constant FID header of 0b0111.\r\n        fidByteArray[0] = 0b01110000 + (fidByteArray[0] % 0b00010000);\r\n        const fid = encode(fidByteArray);\r\n        return VALID_FID_PATTERN.test(fid) ? fid : INVALID_FID;\r\n    }\r\n    catch (_a) {\r\n        // FID generation errored\r\n        return INVALID_FID;\r\n    }\r\n}\r\n/** Converts a FID Uint8Array to a base64 string representation. */\r\nfunction encode(fidByteArray) {\r\n    const b64String = bufferToBase64UrlSafe(fidByteArray);\r\n    // Remove the 23rd character that was added because of the extra 4 bits at the\r\n    // end of our 17 byte array, and the '=' padding.\r\n    return b64String.substr(0, 22);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** Returns a string key that can be used to identify the app. */\r\nfunction getKey(appConfig) {\r\n    return `${appConfig.appName}!${appConfig.appId}`;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst fidChangeCallbacks = new Map();\r\n/**\r\n * Calls the onIdChange callbacks with the new FID value, and broadcasts the\r\n * change to other tabs.\r\n */\r\nfunction fidChanged(appConfig, fid) {\r\n    const key = getKey(appConfig);\r\n    callFidChangeCallbacks(key, fid);\r\n    broadcastFidChange(key, fid);\r\n}\r\nfunction addCallback(appConfig, callback) {\r\n    // Open the broadcast channel if it's not already open,\r\n    // to be able to listen to change events from other tabs.\r\n    getBroadcastChannel();\r\n    const key = getKey(appConfig);\r\n    let callbackSet = fidChangeCallbacks.get(key);\r\n    if (!callbackSet) {\r\n        callbackSet = new Set();\r\n        fidChangeCallbacks.set(key, callbackSet);\r\n    }\r\n    callbackSet.add(callback);\r\n}\r\nfunction removeCallback(appConfig, callback) {\r\n    const key = getKey(appConfig);\r\n    const callbackSet = fidChangeCallbacks.get(key);\r\n    if (!callbackSet) {\r\n        return;\r\n    }\r\n    callbackSet.delete(callback);\r\n    if (callbackSet.size === 0) {\r\n        fidChangeCallbacks.delete(key);\r\n    }\r\n    // Close broadcast channel if there are no more callbacks.\r\n    closeBroadcastChannel();\r\n}\r\nfunction callFidChangeCallbacks(key, fid) {\r\n    const callbacks = fidChangeCallbacks.get(key);\r\n    if (!callbacks) {\r\n        return;\r\n    }\r\n    for (const callback of callbacks) {\r\n        callback(fid);\r\n    }\r\n}\r\nfunction broadcastFidChange(key, fid) {\r\n    const channel = getBroadcastChannel();\r\n    if (channel) {\r\n        channel.postMessage({ key, fid });\r\n    }\r\n    closeBroadcastChannel();\r\n}\r\nlet broadcastChannel = null;\r\n/** Opens and returns a BroadcastChannel if it is supported by the browser. */\r\nfunction getBroadcastChannel() {\r\n    if (!broadcastChannel && 'BroadcastChannel' in self) {\r\n        broadcastChannel = new BroadcastChannel('[Firebase] FID Change');\r\n        broadcastChannel.onmessage = e => {\r\n            callFidChangeCallbacks(e.data.key, e.data.fid);\r\n        };\r\n    }\r\n    return broadcastChannel;\r\n}\r\nfunction closeBroadcastChannel() {\r\n    if (fidChangeCallbacks.size === 0 && broadcastChannel) {\r\n        broadcastChannel.close();\r\n        broadcastChannel = null;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DATABASE_NAME = 'firebase-installations-database';\r\nconst DATABASE_VERSION = 1;\r\nconst OBJECT_STORE_NAME = 'firebase-installations-store';\r\nlet dbPromise = null;\r\nfunction getDbPromise() {\r\n    if (!dbPromise) {\r\n        dbPromise = openDB(DATABASE_NAME, DATABASE_VERSION, {\r\n            upgrade: (db, oldVersion) => {\r\n                // We don't use 'break' in this switch statement, the fall-through\r\n                // behavior is what we want, because if there are multiple versions between\r\n                // the old version and the current version, we want ALL the migrations\r\n                // that correspond to those versions to run, not only the last one.\r\n                // eslint-disable-next-line default-case\r\n                switch (oldVersion) {\r\n                    case 0:\r\n                        db.createObjectStore(OBJECT_STORE_NAME);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    return dbPromise;\r\n}\r\n/** Assigns or overwrites the record for the given key with the given value. */\r\nasync function set(appConfig, value) {\r\n    const key = getKey(appConfig);\r\n    const db = await getDbPromise();\r\n    const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\r\n    const objectStore = tx.objectStore(OBJECT_STORE_NAME);\r\n    const oldValue = (await objectStore.get(key));\r\n    await objectStore.put(value, key);\r\n    await tx.done;\r\n    if (!oldValue || oldValue.fid !== value.fid) {\r\n        fidChanged(appConfig, value.fid);\r\n    }\r\n    return value;\r\n}\r\n/** Removes record(s) from the objectStore that match the given key. */\r\nasync function remove(appConfig) {\r\n    const key = getKey(appConfig);\r\n    const db = await getDbPromise();\r\n    const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\r\n    await tx.objectStore(OBJECT_STORE_NAME).delete(key);\r\n    await tx.done;\r\n}\r\n/**\r\n * Atomically updates a record with the result of updateFn, which gets\r\n * called with the current value. If newValue is undefined, the record is\r\n * deleted instead.\r\n * @return Updated value\r\n */\r\nasync function update(appConfig, updateFn) {\r\n    const key = getKey(appConfig);\r\n    const db = await getDbPromise();\r\n    const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\r\n    const store = tx.objectStore(OBJECT_STORE_NAME);\r\n    const oldValue = (await store.get(key));\r\n    const newValue = updateFn(oldValue);\r\n    if (newValue === undefined) {\r\n        await store.delete(key);\r\n    }\r\n    else {\r\n        await store.put(newValue, key);\r\n    }\r\n    await tx.done;\r\n    if (newValue && (!oldValue || oldValue.fid !== newValue.fid)) {\r\n        fidChanged(appConfig, newValue.fid);\r\n    }\r\n    return newValue;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Updates and returns the InstallationEntry from the database.\r\n * Also triggers a registration request if it is necessary and possible.\r\n */\r\nasync function getInstallationEntry(installations) {\r\n    let registrationPromise;\r\n    const installationEntry = await update(installations.appConfig, oldEntry => {\r\n        const installationEntry = updateOrCreateInstallationEntry(oldEntry);\r\n        const entryWithPromise = triggerRegistrationIfNecessary(installations, installationEntry);\r\n        registrationPromise = entryWithPromise.registrationPromise;\r\n        return entryWithPromise.installationEntry;\r\n    });\r\n    if (installationEntry.fid === INVALID_FID) {\r\n        // FID generation failed. Waiting for the FID from the server.\r\n        return { installationEntry: await registrationPromise };\r\n    }\r\n    return {\r\n        installationEntry,\r\n        registrationPromise\r\n    };\r\n}\r\n/**\r\n * Creates a new Installation Entry if one does not exist.\r\n * Also clears timed out pending requests.\r\n */\r\nfunction updateOrCreateInstallationEntry(oldEntry) {\r\n    const entry = oldEntry || {\r\n        fid: generateFid(),\r\n        registrationStatus: 0 /* RequestStatus.NOT_STARTED */\r\n    };\r\n    return clearTimedOutRequest(entry);\r\n}\r\n/**\r\n * If the Firebase Installation is not registered yet, this will trigger the\r\n * registration and return an InProgressInstallationEntry.\r\n *\r\n * If registrationPromise does not exist, the installationEntry is guaranteed\r\n * to be registered.\r\n */\r\nfunction triggerRegistrationIfNecessary(installations, installationEntry) {\r\n    if (installationEntry.registrationStatus === 0 /* RequestStatus.NOT_STARTED */) {\r\n        if (!navigator.onLine) {\r\n            // Registration required but app is offline.\r\n            const registrationPromiseWithError = Promise.reject(ERROR_FACTORY.create(\"app-offline\" /* ErrorCode.APP_OFFLINE */));\r\n            return {\r\n                installationEntry,\r\n                registrationPromise: registrationPromiseWithError\r\n            };\r\n        }\r\n        // Try registering. Change status to IN_PROGRESS.\r\n        const inProgressEntry = {\r\n            fid: installationEntry.fid,\r\n            registrationStatus: 1 /* RequestStatus.IN_PROGRESS */,\r\n            registrationTime: Date.now()\r\n        };\r\n        const registrationPromise = registerInstallation(installations, inProgressEntry);\r\n        return { installationEntry: inProgressEntry, registrationPromise };\r\n    }\r\n    else if (installationEntry.registrationStatus === 1 /* RequestStatus.IN_PROGRESS */) {\r\n        return {\r\n            installationEntry,\r\n            registrationPromise: waitUntilFidRegistration(installations)\r\n        };\r\n    }\r\n    else {\r\n        return { installationEntry };\r\n    }\r\n}\r\n/** This will be executed only once for each new Firebase Installation. */\r\nasync function registerInstallation(installations, installationEntry) {\r\n    try {\r\n        const registeredInstallationEntry = await createInstallationRequest(installations, installationEntry);\r\n        return set(installations.appConfig, registeredInstallationEntry);\r\n    }\r\n    catch (e) {\r\n        if (isServerError(e) && e.customData.serverCode === 409) {\r\n            // Server returned a \"FID can not be used\" error.\r\n            // Generate a new ID next time.\r\n            await remove(installations.appConfig);\r\n        }\r\n        else {\r\n            // Registration failed. Set FID as not registered.\r\n            await set(installations.appConfig, {\r\n                fid: installationEntry.fid,\r\n                registrationStatus: 0 /* RequestStatus.NOT_STARTED */\r\n            });\r\n        }\r\n        throw e;\r\n    }\r\n}\r\n/** Call if FID registration is pending in another request. */\r\nasync function waitUntilFidRegistration(installations) {\r\n    // Unfortunately, there is no way of reliably observing when a value in\r\n    // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\r\n    // so we need to poll.\r\n    let entry = await updateInstallationRequest(installations.appConfig);\r\n    while (entry.registrationStatus === 1 /* RequestStatus.IN_PROGRESS */) {\r\n        // createInstallation request still in progress.\r\n        await sleep(100);\r\n        entry = await updateInstallationRequest(installations.appConfig);\r\n    }\r\n    if (entry.registrationStatus === 0 /* RequestStatus.NOT_STARTED */) {\r\n        // The request timed out or failed in a different call. Try again.\r\n        const { installationEntry, registrationPromise } = await getInstallationEntry(installations);\r\n        if (registrationPromise) {\r\n            return registrationPromise;\r\n        }\r\n        else {\r\n            // if there is no registrationPromise, entry is registered.\r\n            return installationEntry;\r\n        }\r\n    }\r\n    return entry;\r\n}\r\n/**\r\n * Called only if there is a CreateInstallation request in progress.\r\n *\r\n * Updates the InstallationEntry in the DB based on the status of the\r\n * CreateInstallation request.\r\n *\r\n * Returns the updated InstallationEntry.\r\n */\r\nfunction updateInstallationRequest(appConfig) {\r\n    return update(appConfig, oldEntry => {\r\n        if (!oldEntry) {\r\n            throw ERROR_FACTORY.create(\"installation-not-found\" /* ErrorCode.INSTALLATION_NOT_FOUND */);\r\n        }\r\n        return clearTimedOutRequest(oldEntry);\r\n    });\r\n}\r\nfunction clearTimedOutRequest(entry) {\r\n    if (hasInstallationRequestTimedOut(entry)) {\r\n        return {\r\n            fid: entry.fid,\r\n            registrationStatus: 0 /* RequestStatus.NOT_STARTED */\r\n        };\r\n    }\r\n    return entry;\r\n}\r\nfunction hasInstallationRequestTimedOut(installationEntry) {\r\n    return (installationEntry.registrationStatus === 1 /* RequestStatus.IN_PROGRESS */ &&\r\n        installationEntry.registrationTime + PENDING_TIMEOUT_MS < Date.now());\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function generateAuthTokenRequest({ appConfig, heartbeatServiceProvider }, installationEntry) {\r\n    const endpoint = getGenerateAuthTokenEndpoint(appConfig, installationEntry);\r\n    const headers = getHeadersWithAuth(appConfig, installationEntry);\r\n    // If heartbeat service exists, add the heartbeat string to the header.\r\n    const heartbeatService = heartbeatServiceProvider.getImmediate({\r\n        optional: true\r\n    });\r\n    if (heartbeatService) {\r\n        const heartbeatsHeader = await heartbeatService.getHeartbeatsHeader();\r\n        if (heartbeatsHeader) {\r\n            headers.append('x-firebase-client', heartbeatsHeader);\r\n        }\r\n    }\r\n    const body = {\r\n        installation: {\r\n            sdkVersion: PACKAGE_VERSION,\r\n            appId: appConfig.appId\r\n        }\r\n    };\r\n    const request = {\r\n        method: 'POST',\r\n        headers,\r\n        body: JSON.stringify(body)\r\n    };\r\n    const response = await retryIfServerError(() => fetch(endpoint, request));\r\n    if (response.ok) {\r\n        const responseValue = await response.json();\r\n        const completedAuthToken = extractAuthTokenInfoFromResponse(responseValue);\r\n        return completedAuthToken;\r\n    }\r\n    else {\r\n        throw await getErrorFromResponse('Generate Auth Token', response);\r\n    }\r\n}\r\nfunction getGenerateAuthTokenEndpoint(appConfig, { fid }) {\r\n    return `${getInstallationsEndpoint(appConfig)}/${fid}/authTokens:generate`;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns a valid authentication token for the installation. Generates a new\r\n * token if one doesn't exist, is expired or about to expire.\r\n *\r\n * Should only be called if the Firebase Installation is registered.\r\n */\r\nasync function refreshAuthToken(installations, forceRefresh = false) {\r\n    let tokenPromise;\r\n    const entry = await update(installations.appConfig, oldEntry => {\r\n        if (!isEntryRegistered(oldEntry)) {\r\n            throw ERROR_FACTORY.create(\"not-registered\" /* ErrorCode.NOT_REGISTERED */);\r\n        }\r\n        const oldAuthToken = oldEntry.authToken;\r\n        if (!forceRefresh && isAuthTokenValid(oldAuthToken)) {\r\n            // There is a valid token in the DB.\r\n            return oldEntry;\r\n        }\r\n        else if (oldAuthToken.requestStatus === 1 /* RequestStatus.IN_PROGRESS */) {\r\n            // There already is a token request in progress.\r\n            tokenPromise = waitUntilAuthTokenRequest(installations, forceRefresh);\r\n            return oldEntry;\r\n        }\r\n        else {\r\n            // No token or token expired.\r\n            if (!navigator.onLine) {\r\n                throw ERROR_FACTORY.create(\"app-offline\" /* ErrorCode.APP_OFFLINE */);\r\n            }\r\n            const inProgressEntry = makeAuthTokenRequestInProgressEntry(oldEntry);\r\n            tokenPromise = fetchAuthTokenFromServer(installations, inProgressEntry);\r\n            return inProgressEntry;\r\n        }\r\n    });\r\n    const authToken = tokenPromise\r\n        ? await tokenPromise\r\n        : entry.authToken;\r\n    return authToken;\r\n}\r\n/**\r\n * Call only if FID is registered and Auth Token request is in progress.\r\n *\r\n * Waits until the current pending request finishes. If the request times out,\r\n * tries once in this thread as well.\r\n */\r\nasync function waitUntilAuthTokenRequest(installations, forceRefresh) {\r\n    // Unfortunately, there is no way of reliably observing when a value in\r\n    // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\r\n    // so we need to poll.\r\n    let entry = await updateAuthTokenRequest(installations.appConfig);\r\n    while (entry.authToken.requestStatus === 1 /* RequestStatus.IN_PROGRESS */) {\r\n        // generateAuthToken still in progress.\r\n        await sleep(100);\r\n        entry = await updateAuthTokenRequest(installations.appConfig);\r\n    }\r\n    const authToken = entry.authToken;\r\n    if (authToken.requestStatus === 0 /* RequestStatus.NOT_STARTED */) {\r\n        // The request timed out or failed in a different call. Try again.\r\n        return refreshAuthToken(installations, forceRefresh);\r\n    }\r\n    else {\r\n        return authToken;\r\n    }\r\n}\r\n/**\r\n * Called only if there is a GenerateAuthToken request in progress.\r\n *\r\n * Updates the InstallationEntry in the DB based on the status of the\r\n * GenerateAuthToken request.\r\n *\r\n * Returns the updated InstallationEntry.\r\n */\r\nfunction updateAuthTokenRequest(appConfig) {\r\n    return update(appConfig, oldEntry => {\r\n        if (!isEntryRegistered(oldEntry)) {\r\n            throw ERROR_FACTORY.create(\"not-registered\" /* ErrorCode.NOT_REGISTERED */);\r\n        }\r\n        const oldAuthToken = oldEntry.authToken;\r\n        if (hasAuthTokenRequestTimedOut(oldAuthToken)) {\r\n            return Object.assign(Object.assign({}, oldEntry), { authToken: { requestStatus: 0 /* RequestStatus.NOT_STARTED */ } });\r\n        }\r\n        return oldEntry;\r\n    });\r\n}\r\nasync function fetchAuthTokenFromServer(installations, installationEntry) {\r\n    try {\r\n        const authToken = await generateAuthTokenRequest(installations, installationEntry);\r\n        const updatedInstallationEntry = Object.assign(Object.assign({}, installationEntry), { authToken });\r\n        await set(installations.appConfig, updatedInstallationEntry);\r\n        return authToken;\r\n    }\r\n    catch (e) {\r\n        if (isServerError(e) &&\r\n            (e.customData.serverCode === 401 || e.customData.serverCode === 404)) {\r\n            // Server returned a \"FID not found\" or a \"Invalid authentication\" error.\r\n            // Generate a new ID next time.\r\n            await remove(installations.appConfig);\r\n        }\r\n        else {\r\n            const updatedInstallationEntry = Object.assign(Object.assign({}, installationEntry), { authToken: { requestStatus: 0 /* RequestStatus.NOT_STARTED */ } });\r\n            await set(installations.appConfig, updatedInstallationEntry);\r\n        }\r\n        throw e;\r\n    }\r\n}\r\nfunction isEntryRegistered(installationEntry) {\r\n    return (installationEntry !== undefined &&\r\n        installationEntry.registrationStatus === 2 /* RequestStatus.COMPLETED */);\r\n}\r\nfunction isAuthTokenValid(authToken) {\r\n    return (authToken.requestStatus === 2 /* RequestStatus.COMPLETED */ &&\r\n        !isAuthTokenExpired(authToken));\r\n}\r\nfunction isAuthTokenExpired(authToken) {\r\n    const now = Date.now();\r\n    return (now < authToken.creationTime ||\r\n        authToken.creationTime + authToken.expiresIn < now + TOKEN_EXPIRATION_BUFFER);\r\n}\r\n/** Returns an updated InstallationEntry with an InProgressAuthToken. */\r\nfunction makeAuthTokenRequestInProgressEntry(oldEntry) {\r\n    const inProgressAuthToken = {\r\n        requestStatus: 1 /* RequestStatus.IN_PROGRESS */,\r\n        requestTime: Date.now()\r\n    };\r\n    return Object.assign(Object.assign({}, oldEntry), { authToken: inProgressAuthToken });\r\n}\r\nfunction hasAuthTokenRequestTimedOut(authToken) {\r\n    return (authToken.requestStatus === 1 /* RequestStatus.IN_PROGRESS */ &&\r\n        authToken.requestTime + PENDING_TIMEOUT_MS < Date.now());\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Creates a Firebase Installation if there isn't one for the app and\r\n * returns the Installation ID.\r\n * @param installations - The `Installations` instance.\r\n *\r\n * @public\r\n */\r\nasync function getId(installations) {\r\n    const installationsImpl = installations;\r\n    const { installationEntry, registrationPromise } = await getInstallationEntry(installationsImpl);\r\n    if (registrationPromise) {\r\n        registrationPromise.catch(console.error);\r\n    }\r\n    else {\r\n        // If the installation is already registered, update the authentication\r\n        // token if needed.\r\n        refreshAuthToken(installationsImpl).catch(console.error);\r\n    }\r\n    return installationEntry.fid;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns a Firebase Installations auth token, identifying the current\r\n * Firebase Installation.\r\n * @param installations - The `Installations` instance.\r\n * @param forceRefresh - Force refresh regardless of token expiration.\r\n *\r\n * @public\r\n */\r\nasync function getToken(installations, forceRefresh = false) {\r\n    const installationsImpl = installations;\r\n    await completeInstallationRegistration(installationsImpl);\r\n    // At this point we either have a Registered Installation in the DB, or we've\r\n    // already thrown an error.\r\n    const authToken = await refreshAuthToken(installationsImpl, forceRefresh);\r\n    return authToken.token;\r\n}\r\nasync function completeInstallationRegistration(installations) {\r\n    const { registrationPromise } = await getInstallationEntry(installations);\r\n    if (registrationPromise) {\r\n        // A createInstallation request is in progress. Wait until it finishes.\r\n        await registrationPromise;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function deleteInstallationRequest(appConfig, installationEntry) {\r\n    const endpoint = getDeleteEndpoint(appConfig, installationEntry);\r\n    const headers = getHeadersWithAuth(appConfig, installationEntry);\r\n    const request = {\r\n        method: 'DELETE',\r\n        headers\r\n    };\r\n    const response = await retryIfServerError(() => fetch(endpoint, request));\r\n    if (!response.ok) {\r\n        throw await getErrorFromResponse('Delete Installation', response);\r\n    }\r\n}\r\nfunction getDeleteEndpoint(appConfig, { fid }) {\r\n    return `${getInstallationsEndpoint(appConfig)}/${fid}`;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Deletes the Firebase Installation and all associated data.\r\n * @param installations - The `Installations` instance.\r\n *\r\n * @public\r\n */\r\nasync function deleteInstallations(installations) {\r\n    const { appConfig } = installations;\r\n    const entry = await update(appConfig, oldEntry => {\r\n        if (oldEntry && oldEntry.registrationStatus === 0 /* RequestStatus.NOT_STARTED */) {\r\n            // Delete the unregistered entry without sending a deleteInstallation request.\r\n            return undefined;\r\n        }\r\n        return oldEntry;\r\n    });\r\n    if (entry) {\r\n        if (entry.registrationStatus === 1 /* RequestStatus.IN_PROGRESS */) {\r\n            // Can't delete while trying to register.\r\n            throw ERROR_FACTORY.create(\"delete-pending-registration\" /* ErrorCode.DELETE_PENDING_REGISTRATION */);\r\n        }\r\n        else if (entry.registrationStatus === 2 /* RequestStatus.COMPLETED */) {\r\n            if (!navigator.onLine) {\r\n                throw ERROR_FACTORY.create(\"app-offline\" /* ErrorCode.APP_OFFLINE */);\r\n            }\r\n            else {\r\n                await deleteInstallationRequest(appConfig, entry);\r\n                await remove(appConfig);\r\n            }\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Sets a new callback that will get called when Installation ID changes.\r\n * Returns an unsubscribe function that will remove the callback when called.\r\n * @param installations - The `Installations` instance.\r\n * @param callback - The callback function that is invoked when FID changes.\r\n * @returns A function that can be called to unsubscribe.\r\n *\r\n * @public\r\n */\r\nfunction onIdChange(installations, callback) {\r\n    const { appConfig } = installations;\r\n    addCallback(appConfig, callback);\r\n    return () => {\r\n        removeCallback(appConfig, callback);\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns an instance of {@link Installations} associated with the given\r\n * {@link @firebase/app#FirebaseApp} instance.\r\n * @param app - The {@link @firebase/app#FirebaseApp} instance.\r\n *\r\n * @public\r\n */\r\nfunction getInstallations(app = getApp()) {\r\n    const installationsImpl = _getProvider(app, 'installations').getImmediate();\r\n    return installationsImpl;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction extractAppConfig(app) {\r\n    if (!app || !app.options) {\r\n        throw getMissingValueError('App Configuration');\r\n    }\r\n    if (!app.name) {\r\n        throw getMissingValueError('App Name');\r\n    }\r\n    // Required app config keys\r\n    const configKeys = [\r\n        'projectId',\r\n        'apiKey',\r\n        'appId'\r\n    ];\r\n    for (const keyName of configKeys) {\r\n        if (!app.options[keyName]) {\r\n            throw getMissingValueError(keyName);\r\n        }\r\n    }\r\n    return {\r\n        appName: app.name,\r\n        projectId: app.options.projectId,\r\n        apiKey: app.options.apiKey,\r\n        appId: app.options.appId\r\n    };\r\n}\r\nfunction getMissingValueError(valueName) {\r\n    return ERROR_FACTORY.create(\"missing-app-config-values\" /* ErrorCode.MISSING_APP_CONFIG_VALUES */, {\r\n        valueName\r\n    });\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst INSTALLATIONS_NAME = 'installations';\r\nconst INSTALLATIONS_NAME_INTERNAL = 'installations-internal';\r\nconst publicFactory = (container) => {\r\n    const app = container.getProvider('app').getImmediate();\r\n    // Throws if app isn't configured properly.\r\n    const appConfig = extractAppConfig(app);\r\n    const heartbeatServiceProvider = _getProvider(app, 'heartbeat');\r\n    const installationsImpl = {\r\n        app,\r\n        appConfig,\r\n        heartbeatServiceProvider,\r\n        _delete: () => Promise.resolve()\r\n    };\r\n    return installationsImpl;\r\n};\r\nconst internalFactory = (container) => {\r\n    const app = container.getProvider('app').getImmediate();\r\n    // Internal FIS instance relies on public FIS instance.\r\n    const installations = _getProvider(app, INSTALLATIONS_NAME).getImmediate();\r\n    const installationsInternal = {\r\n        getId: () => getId(installations),\r\n        getToken: (forceRefresh) => getToken(installations, forceRefresh)\r\n    };\r\n    return installationsInternal;\r\n};\r\nfunction registerInstallations() {\r\n    _registerComponent(new Component(INSTALLATIONS_NAME, publicFactory, \"PUBLIC\" /* ComponentType.PUBLIC */));\r\n    _registerComponent(new Component(INSTALLATIONS_NAME_INTERNAL, internalFactory, \"PRIVATE\" /* ComponentType.PRIVATE */));\r\n}\n\n/**\r\n * Firebase Installations\r\n *\r\n * @packageDocumentation\r\n */\r\nregisterInstallations();\r\nregisterVersion(name, version);\r\n// BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\nregisterVersion(name, version, 'esm2017');\n\nexport { deleteInstallations, getId, getInstallations, getToken, onIdChange };\n\n", "import { _getProvider, getApp, _registerComponent, registerVersion, SDK_VERSION } from '@firebase/app';\nimport { ErrorFactory, FirebaseError, getModularInstance, calculateBackoffMillis, isIndexedDBAvailable, validateIndexedDBOpenable } from '@firebase/util';\nimport { Component } from '@firebase/component';\nimport { LogLevel, Logger } from '@firebase/logger';\nimport '@firebase/installations';\n\nconst name = \"@firebase/remote-config\";\nconst version = \"0.4.4\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Shims a minimal AbortSignal.\r\n *\r\n * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects\r\n * of networking, such as retries. Firebase doesn't use AbortController enough to justify a\r\n * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be\r\n * swapped out if/when we do.\r\n */\r\nclass RemoteConfigAbortSignal {\r\n    constructor() {\r\n        this.listeners = [];\r\n    }\r\n    addEventListener(listener) {\r\n        this.listeners.push(listener);\r\n    }\r\n    abort() {\r\n        this.listeners.forEach(listener => listener());\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst RC_COMPONENT_NAME = 'remote-config';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst ERROR_DESCRIPTION_MAP = {\r\n    [\"registration-window\" /* ErrorCode.REGISTRATION_WINDOW */]: 'Undefined window object. This SDK only supports usage in a browser environment.',\r\n    [\"registration-project-id\" /* ErrorCode.REGISTRATION_PROJECT_ID */]: 'Undefined project identifier. Check Firebase app initialization.',\r\n    [\"registration-api-key\" /* ErrorCode.REGISTRATION_API_KEY */]: 'Undefined API key. Check Firebase app initialization.',\r\n    [\"registration-app-id\" /* ErrorCode.REGISTRATION_APP_ID */]: 'Undefined app identifier. Check Firebase app initialization.',\r\n    [\"storage-open\" /* ErrorCode.STORAGE_OPEN */]: 'Error thrown when opening storage. Original error: {$originalErrorMessage}.',\r\n    [\"storage-get\" /* ErrorCode.STORAGE_GET */]: 'Error thrown when reading from storage. Original error: {$originalErrorMessage}.',\r\n    [\"storage-set\" /* ErrorCode.STORAGE_SET */]: 'Error thrown when writing to storage. Original error: {$originalErrorMessage}.',\r\n    [\"storage-delete\" /* ErrorCode.STORAGE_DELETE */]: 'Error thrown when deleting from storage. Original error: {$originalErrorMessage}.',\r\n    [\"fetch-client-network\" /* ErrorCode.FETCH_NETWORK */]: 'Fetch client failed to connect to a network. Check Internet connection.' +\r\n        ' Original error: {$originalErrorMessage}.',\r\n    [\"fetch-timeout\" /* ErrorCode.FETCH_TIMEOUT */]: 'The config fetch request timed out. ' +\r\n        ' Configure timeout using \"fetchTimeoutMillis\" SDK setting.',\r\n    [\"fetch-throttle\" /* ErrorCode.FETCH_THROTTLE */]: 'The config fetch request timed out while in an exponential backoff state.' +\r\n        ' Configure timeout using \"fetchTimeoutMillis\" SDK setting.' +\r\n        ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.',\r\n    [\"fetch-client-parse\" /* ErrorCode.FETCH_PARSE */]: 'Fetch client could not parse response.' +\r\n        ' Original error: {$originalErrorMessage}.',\r\n    [\"fetch-status\" /* ErrorCode.FETCH_STATUS */]: 'Fetch server returned an HTTP error status. HTTP status: {$httpStatus}.',\r\n    [\"indexed-db-unavailable\" /* ErrorCode.INDEXED_DB_UNAVAILABLE */]: 'Indexed DB is not supported by current browser'\r\n};\r\nconst ERROR_FACTORY = new ErrorFactory('remoteconfig' /* service */, 'Remote Config' /* service name */, ERROR_DESCRIPTION_MAP);\r\n// Note how this is like typeof/instanceof, but for ErrorCode.\r\nfunction hasErrorCode(e, errorCode) {\r\n    return e instanceof FirebaseError && e.code.indexOf(errorCode) !== -1;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DEFAULT_VALUE_FOR_BOOLEAN = false;\r\nconst DEFAULT_VALUE_FOR_STRING = '';\r\nconst DEFAULT_VALUE_FOR_NUMBER = 0;\r\nconst BOOLEAN_TRUTHY_VALUES = ['1', 'true', 't', 'yes', 'y', 'on'];\r\nclass Value {\r\n    constructor(_source, _value = DEFAULT_VALUE_FOR_STRING) {\r\n        this._source = _source;\r\n        this._value = _value;\r\n    }\r\n    asString() {\r\n        return this._value;\r\n    }\r\n    asBoolean() {\r\n        if (this._source === 'static') {\r\n            return DEFAULT_VALUE_FOR_BOOLEAN;\r\n        }\r\n        return BOOLEAN_TRUTHY_VALUES.indexOf(this._value.toLowerCase()) >= 0;\r\n    }\r\n    asNumber() {\r\n        if (this._source === 'static') {\r\n            return DEFAULT_VALUE_FOR_NUMBER;\r\n        }\r\n        let num = Number(this._value);\r\n        if (isNaN(num)) {\r\n            num = DEFAULT_VALUE_FOR_NUMBER;\r\n        }\r\n        return num;\r\n    }\r\n    getSource() {\r\n        return this._source;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} instance.\r\n * @returns A {@link RemoteConfig} instance.\r\n *\r\n * @public\r\n */\r\nfunction getRemoteConfig(app = getApp()) {\r\n    app = getModularInstance(app);\r\n    const rcProvider = _getProvider(app, RC_COMPONENT_NAME);\r\n    return rcProvider.getImmediate();\r\n}\r\n/**\r\n * Makes the last fetched config available to the getters.\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n * @returns A `Promise` which resolves to true if the current call activated the fetched configs.\r\n * If the fetched configs were already activated, the `Promise` will resolve to false.\r\n *\r\n * @public\r\n */\r\nasync function activate(remoteConfig) {\r\n    const rc = getModularInstance(remoteConfig);\r\n    const [lastSuccessfulFetchResponse, activeConfigEtag] = await Promise.all([\r\n        rc._storage.getLastSuccessfulFetchResponse(),\r\n        rc._storage.getActiveConfigEtag()\r\n    ]);\r\n    if (!lastSuccessfulFetchResponse ||\r\n        !lastSuccessfulFetchResponse.config ||\r\n        !lastSuccessfulFetchResponse.eTag ||\r\n        lastSuccessfulFetchResponse.eTag === activeConfigEtag) {\r\n        // Either there is no successful fetched config, or is the same as current active\r\n        // config.\r\n        return false;\r\n    }\r\n    await Promise.all([\r\n        rc._storageCache.setActiveConfig(lastSuccessfulFetchResponse.config),\r\n        rc._storage.setActiveConfigEtag(lastSuccessfulFetchResponse.eTag)\r\n    ]);\r\n    return true;\r\n}\r\n/**\r\n * Ensures the last activated config are available to the getters.\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n *\r\n * @returns A `Promise` that resolves when the last activated config is available to the getters.\r\n * @public\r\n */\r\nfunction ensureInitialized(remoteConfig) {\r\n    const rc = getModularInstance(remoteConfig);\r\n    if (!rc._initializePromise) {\r\n        rc._initializePromise = rc._storageCache.loadFromStorage().then(() => {\r\n            rc._isInitializationComplete = true;\r\n        });\r\n    }\r\n    return rc._initializePromise;\r\n}\r\n/**\r\n * Fetches and caches configuration from the Remote Config service.\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n * @public\r\n */\r\nasync function fetchConfig(remoteConfig) {\r\n    const rc = getModularInstance(remoteConfig);\r\n    // Aborts the request after the given timeout, causing the fetch call to\r\n    // reject with an `AbortError`.\r\n    //\r\n    // <p>Aborting after the request completes is a no-op, so we don't need a\r\n    // corresponding `clearTimeout`.\r\n    //\r\n    // Locating abort logic here because:\r\n    // * it uses a developer setting (timeout)\r\n    // * it applies to all retries (like curl's max-time arg)\r\n    // * it is consistent with the Fetch API's signal input\r\n    const abortSignal = new RemoteConfigAbortSignal();\r\n    setTimeout(async () => {\r\n        // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.\r\n        abortSignal.abort();\r\n    }, rc.settings.fetchTimeoutMillis);\r\n    // Catches *all* errors thrown by client so status can be set consistently.\r\n    try {\r\n        await rc._client.fetch({\r\n            cacheMaxAgeMillis: rc.settings.minimumFetchIntervalMillis,\r\n            signal: abortSignal\r\n        });\r\n        await rc._storageCache.setLastFetchStatus('success');\r\n    }\r\n    catch (e) {\r\n        const lastFetchStatus = hasErrorCode(e, \"fetch-throttle\" /* ErrorCode.FETCH_THROTTLE */)\r\n            ? 'throttle'\r\n            : 'failure';\r\n        await rc._storageCache.setLastFetchStatus(lastFetchStatus);\r\n        throw e;\r\n    }\r\n}\r\n/**\r\n * Gets all config.\r\n *\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n * @returns All config.\r\n *\r\n * @public\r\n */\r\nfunction getAll(remoteConfig) {\r\n    const rc = getModularInstance(remoteConfig);\r\n    return getAllKeys(rc._storageCache.getActiveConfig(), rc.defaultConfig).reduce((allConfigs, key) => {\r\n        allConfigs[key] = getValue(remoteConfig, key);\r\n        return allConfigs;\r\n    }, {});\r\n}\r\n/**\r\n * Gets the value for the given key as a boolean.\r\n *\r\n * Convenience method for calling <code>remoteConfig.getValue(key).asBoolean()</code>.\r\n *\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n * @param key - The name of the parameter.\r\n *\r\n * @returns The value for the given key as a boolean.\r\n * @public\r\n */\r\nfunction getBoolean(remoteConfig, key) {\r\n    return getValue(getModularInstance(remoteConfig), key).asBoolean();\r\n}\r\n/**\r\n * Gets the value for the given key as a number.\r\n *\r\n * Convenience method for calling <code>remoteConfig.getValue(key).asNumber()</code>.\r\n *\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n * @param key - The name of the parameter.\r\n *\r\n * @returns The value for the given key as a number.\r\n *\r\n * @public\r\n */\r\nfunction getNumber(remoteConfig, key) {\r\n    return getValue(getModularInstance(remoteConfig), key).asNumber();\r\n}\r\n/**\r\n * Gets the value for the given key as a string.\r\n * Convenience method for calling <code>remoteConfig.getValue(key).asString()</code>.\r\n *\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n * @param key - The name of the parameter.\r\n *\r\n * @returns The value for the given key as a string.\r\n *\r\n * @public\r\n */\r\nfunction getString(remoteConfig, key) {\r\n    return getValue(getModularInstance(remoteConfig), key).asString();\r\n}\r\n/**\r\n * Gets the {@link Value} for the given key.\r\n *\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n * @param key - The name of the parameter.\r\n *\r\n * @returns The value for the given key.\r\n *\r\n * @public\r\n */\r\nfunction getValue(remoteConfig, key) {\r\n    const rc = getModularInstance(remoteConfig);\r\n    if (!rc._isInitializationComplete) {\r\n        rc._logger.debug(`A value was requested for key \"${key}\" before SDK initialization completed.` +\r\n            ' Await on ensureInitialized if the intent was to get a previously activated value.');\r\n    }\r\n    const activeConfig = rc._storageCache.getActiveConfig();\r\n    if (activeConfig && activeConfig[key] !== undefined) {\r\n        return new Value('remote', activeConfig[key]);\r\n    }\r\n    else if (rc.defaultConfig && rc.defaultConfig[key] !== undefined) {\r\n        return new Value('default', String(rc.defaultConfig[key]));\r\n    }\r\n    rc._logger.debug(`Returning static value for key \"${key}\".` +\r\n        ' Define a default or remote value if this is unintentional.');\r\n    return new Value('static');\r\n}\r\n/**\r\n * Defines the log level to use.\r\n *\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n * @param logLevel - The log level to set.\r\n *\r\n * @public\r\n */\r\nfunction setLogLevel(remoteConfig, logLevel) {\r\n    const rc = getModularInstance(remoteConfig);\r\n    switch (logLevel) {\r\n        case 'debug':\r\n            rc._logger.logLevel = LogLevel.DEBUG;\r\n            break;\r\n        case 'silent':\r\n            rc._logger.logLevel = LogLevel.SILENT;\r\n            break;\r\n        default:\r\n            rc._logger.logLevel = LogLevel.ERROR;\r\n    }\r\n}\r\n/**\r\n * Dedupes and returns an array of all the keys of the received objects.\r\n */\r\nfunction getAllKeys(obj1 = {}, obj2 = {}) {\r\n    return Object.keys(Object.assign(Object.assign({}, obj1), obj2));\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Implements the {@link RemoteConfigClient} abstraction with success response caching.\r\n *\r\n * <p>Comparable to the browser's Cache API for responses, but the Cache API requires a Service\r\n * Worker, which requires HTTPS, which would significantly complicate SDK installation. Also, the\r\n * Cache API doesn't support matching entries by time.\r\n */\r\nclass CachingClient {\r\n    constructor(client, storage, storageCache, logger) {\r\n        this.client = client;\r\n        this.storage = storage;\r\n        this.storageCache = storageCache;\r\n        this.logger = logger;\r\n    }\r\n    /**\r\n     * Returns true if the age of the cached fetched configs is less than or equal to\r\n     * {@link Settings#minimumFetchIntervalInSeconds}.\r\n     *\r\n     * <p>This is comparable to passing `headers = { 'Cache-Control': max-age <maxAge> }` to the\r\n     * native Fetch API.\r\n     *\r\n     * <p>Visible for testing.\r\n     */\r\n    isCachedDataFresh(cacheMaxAgeMillis, lastSuccessfulFetchTimestampMillis) {\r\n        // Cache can only be fresh if it's populated.\r\n        if (!lastSuccessfulFetchTimestampMillis) {\r\n            this.logger.debug('Config fetch cache check. Cache unpopulated.');\r\n            return false;\r\n        }\r\n        // Calculates age of cache entry.\r\n        const cacheAgeMillis = Date.now() - lastSuccessfulFetchTimestampMillis;\r\n        const isCachedDataFresh = cacheAgeMillis <= cacheMaxAgeMillis;\r\n        this.logger.debug('Config fetch cache check.' +\r\n            ` Cache age millis: ${cacheAgeMillis}.` +\r\n            ` Cache max age millis (minimumFetchIntervalMillis setting): ${cacheMaxAgeMillis}.` +\r\n            ` Is cache hit: ${isCachedDataFresh}.`);\r\n        return isCachedDataFresh;\r\n    }\r\n    async fetch(request) {\r\n        // Reads from persisted storage to avoid cache miss if callers don't wait on initialization.\r\n        const [lastSuccessfulFetchTimestampMillis, lastSuccessfulFetchResponse] = await Promise.all([\r\n            this.storage.getLastSuccessfulFetchTimestampMillis(),\r\n            this.storage.getLastSuccessfulFetchResponse()\r\n        ]);\r\n        // Exits early on cache hit.\r\n        if (lastSuccessfulFetchResponse &&\r\n            this.isCachedDataFresh(request.cacheMaxAgeMillis, lastSuccessfulFetchTimestampMillis)) {\r\n            return lastSuccessfulFetchResponse;\r\n        }\r\n        // Deviates from pure decorator by not honoring a passed ETag since we don't have a public API\r\n        // that allows the caller to pass an ETag.\r\n        request.eTag =\r\n            lastSuccessfulFetchResponse && lastSuccessfulFetchResponse.eTag;\r\n        // Falls back to service on cache miss.\r\n        const response = await this.client.fetch(request);\r\n        // Fetch throws for non-success responses, so success is guaranteed here.\r\n        const storageOperations = [\r\n            // Uses write-through cache for consistency with synchronous public API.\r\n            this.storageCache.setLastSuccessfulFetchTimestampMillis(Date.now())\r\n        ];\r\n        if (response.status === 200) {\r\n            // Caches response only if it has changed, ie non-304 responses.\r\n            storageOperations.push(this.storage.setLastSuccessfulFetchResponse(response));\r\n        }\r\n        await Promise.all(storageOperations);\r\n        return response;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Attempts to get the most accurate browser language setting.\r\n *\r\n * <p>Adapted from getUserLanguage in packages/auth/src/utils.js for TypeScript.\r\n *\r\n * <p>Defers default language specification to server logic for consistency.\r\n *\r\n * @param navigatorLanguage Enables tests to override read-only {@link NavigatorLanguage}.\r\n */\r\nfunction getUserLanguage(navigatorLanguage = navigator) {\r\n    return (\r\n    // Most reliable, but only supported in Chrome/Firefox.\r\n    (navigatorLanguage.languages && navigatorLanguage.languages[0]) ||\r\n        // Supported in most browsers, but returns the language of the browser\r\n        // UI, not the language set in browser settings.\r\n        navigatorLanguage.language\r\n    // Polyfill otherwise.\r\n    );\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Implements the Client abstraction for the Remote Config REST API.\r\n */\r\nclass RestClient {\r\n    constructor(firebaseInstallations, sdkVersion, namespace, projectId, apiKey, appId) {\r\n        this.firebaseInstallations = firebaseInstallations;\r\n        this.sdkVersion = sdkVersion;\r\n        this.namespace = namespace;\r\n        this.projectId = projectId;\r\n        this.apiKey = apiKey;\r\n        this.appId = appId;\r\n    }\r\n    /**\r\n     * Fetches from the Remote Config REST API.\r\n     *\r\n     * @throws a {@link ErrorCode.FETCH_NETWORK} error if {@link GlobalFetch#fetch} can't\r\n     * connect to the network.\r\n     * @throws a {@link ErrorCode.FETCH_PARSE} error if {@link Response#json} can't parse the\r\n     * fetch response.\r\n     * @throws a {@link ErrorCode.FETCH_STATUS} error if the service returns an HTTP error status.\r\n     */\r\n    async fetch(request) {\r\n        const [installationId, installationToken] = await Promise.all([\r\n            this.firebaseInstallations.getId(),\r\n            this.firebaseInstallations.getToken()\r\n        ]);\r\n        const urlBase = window.FIREBASE_REMOTE_CONFIG_URL_BASE ||\r\n            'https://firebaseremoteconfig.googleapis.com';\r\n        const url = `${urlBase}/v1/projects/${this.projectId}/namespaces/${this.namespace}:fetch?key=${this.apiKey}`;\r\n        const headers = {\r\n            'Content-Type': 'application/json',\r\n            'Content-Encoding': 'gzip',\r\n            // Deviates from pure decorator by not passing max-age header since we don't currently have\r\n            // service behavior using that header.\r\n            'If-None-Match': request.eTag || '*'\r\n        };\r\n        const requestBody = {\r\n            /* eslint-disable camelcase */\r\n            sdk_version: this.sdkVersion,\r\n            app_instance_id: installationId,\r\n            app_instance_id_token: installationToken,\r\n            app_id: this.appId,\r\n            language_code: getUserLanguage()\r\n            /* eslint-enable camelcase */\r\n        };\r\n        const options = {\r\n            method: 'POST',\r\n            headers,\r\n            body: JSON.stringify(requestBody)\r\n        };\r\n        // This logic isn't REST-specific, but shimming abort logic isn't worth another decorator.\r\n        const fetchPromise = fetch(url, options);\r\n        const timeoutPromise = new Promise((_resolve, reject) => {\r\n            // Maps async event listener to Promise API.\r\n            request.signal.addEventListener(() => {\r\n                // Emulates https://heycam.github.io/webidl/#aborterror\r\n                const error = new Error('The operation was aborted.');\r\n                error.name = 'AbortError';\r\n                reject(error);\r\n            });\r\n        });\r\n        let response;\r\n        try {\r\n            await Promise.race([fetchPromise, timeoutPromise]);\r\n            response = await fetchPromise;\r\n        }\r\n        catch (originalError) {\r\n            let errorCode = \"fetch-client-network\" /* ErrorCode.FETCH_NETWORK */;\r\n            if ((originalError === null || originalError === void 0 ? void 0 : originalError.name) === 'AbortError') {\r\n                errorCode = \"fetch-timeout\" /* ErrorCode.FETCH_TIMEOUT */;\r\n            }\r\n            throw ERROR_FACTORY.create(errorCode, {\r\n                originalErrorMessage: originalError === null || originalError === void 0 ? void 0 : originalError.message\r\n            });\r\n        }\r\n        let status = response.status;\r\n        // Normalizes nullable header to optional.\r\n        const responseEtag = response.headers.get('ETag') || undefined;\r\n        let config;\r\n        let state;\r\n        // JSON parsing throws SyntaxError if the response body isn't a JSON string.\r\n        // Requesting application/json and checking for a 200 ensures there's JSON data.\r\n        if (response.status === 200) {\r\n            let responseBody;\r\n            try {\r\n                responseBody = await response.json();\r\n            }\r\n            catch (originalError) {\r\n                throw ERROR_FACTORY.create(\"fetch-client-parse\" /* ErrorCode.FETCH_PARSE */, {\r\n                    originalErrorMessage: originalError === null || originalError === void 0 ? void 0 : originalError.message\r\n                });\r\n            }\r\n            config = responseBody['entries'];\r\n            state = responseBody['state'];\r\n        }\r\n        // Normalizes based on legacy state.\r\n        if (state === 'INSTANCE_STATE_UNSPECIFIED') {\r\n            status = 500;\r\n        }\r\n        else if (state === 'NO_CHANGE') {\r\n            status = 304;\r\n        }\r\n        else if (state === 'NO_TEMPLATE' || state === 'EMPTY_CONFIG') {\r\n            // These cases can be fixed remotely, so normalize to safe value.\r\n            config = {};\r\n        }\r\n        // Normalize to exception-based control flow for non-success cases.\r\n        // Encapsulates HTTP specifics in this class as much as possible. Status is still the best for\r\n        // differentiating success states (200 from 304; the state body param is undefined in a\r\n        // standard 304).\r\n        if (status !== 304 && status !== 200) {\r\n            throw ERROR_FACTORY.create(\"fetch-status\" /* ErrorCode.FETCH_STATUS */, {\r\n                httpStatus: status\r\n            });\r\n        }\r\n        return { status, eTag: responseEtag, config };\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Supports waiting on a backoff by:\r\n *\r\n * <ul>\r\n *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>\r\n *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>\r\n *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled\r\n *       request appear the same.</li>\r\n * </ul>\r\n *\r\n * <p>Visible for testing.\r\n */\r\nfunction setAbortableTimeout(signal, throttleEndTimeMillis) {\r\n    return new Promise((resolve, reject) => {\r\n        // Derives backoff from given end time, normalizing negative numbers to zero.\r\n        const backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);\r\n        const timeout = setTimeout(resolve, backoffMillis);\r\n        // Adds listener, rather than sets onabort, because signal is a shared object.\r\n        signal.addEventListener(() => {\r\n            clearTimeout(timeout);\r\n            // If the request completes before this timeout, the rejection has no effect.\r\n            reject(ERROR_FACTORY.create(\"fetch-throttle\" /* ErrorCode.FETCH_THROTTLE */, {\r\n                throttleEndTimeMillis\r\n            }));\r\n        });\r\n    });\r\n}\r\n/**\r\n * Returns true if the {@link Error} indicates a fetch request may succeed later.\r\n */\r\nfunction isRetriableError(e) {\r\n    if (!(e instanceof FirebaseError) || !e.customData) {\r\n        return false;\r\n    }\r\n    // Uses string index defined by ErrorData, which FirebaseError implements.\r\n    const httpStatus = Number(e.customData['httpStatus']);\r\n    return (httpStatus === 429 ||\r\n        httpStatus === 500 ||\r\n        httpStatus === 503 ||\r\n        httpStatus === 504);\r\n}\r\n/**\r\n * Decorates a Client with retry logic.\r\n *\r\n * <p>Comparable to CachingClient, but uses backoff logic instead of cache max age and doesn't cache\r\n * responses (because the SDK has no use for error responses).\r\n */\r\nclass RetryingClient {\r\n    constructor(client, storage) {\r\n        this.client = client;\r\n        this.storage = storage;\r\n    }\r\n    async fetch(request) {\r\n        const throttleMetadata = (await this.storage.getThrottleMetadata()) || {\r\n            backoffCount: 0,\r\n            throttleEndTimeMillis: Date.now()\r\n        };\r\n        return this.attemptFetch(request, throttleMetadata);\r\n    }\r\n    /**\r\n     * A recursive helper for attempting a fetch request repeatedly.\r\n     *\r\n     * @throws any non-retriable errors.\r\n     */\r\n    async attemptFetch(request, { throttleEndTimeMillis, backoffCount }) {\r\n        // Starts with a (potentially zero) timeout to support resumption from stored state.\r\n        // Ensures the throttle end time is honored if the last attempt timed out.\r\n        // Note the SDK will never make a request if the fetch timeout expires at this point.\r\n        await setAbortableTimeout(request.signal, throttleEndTimeMillis);\r\n        try {\r\n            const response = await this.client.fetch(request);\r\n            // Note the SDK only clears throttle state if response is success or non-retriable.\r\n            await this.storage.deleteThrottleMetadata();\r\n            return response;\r\n        }\r\n        catch (e) {\r\n            if (!isRetriableError(e)) {\r\n                throw e;\r\n            }\r\n            // Increments backoff state.\r\n            const throttleMetadata = {\r\n                throttleEndTimeMillis: Date.now() + calculateBackoffMillis(backoffCount),\r\n                backoffCount: backoffCount + 1\r\n            };\r\n            // Persists state.\r\n            await this.storage.setThrottleMetadata(throttleMetadata);\r\n            return this.attemptFetch(request, throttleMetadata);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DEFAULT_FETCH_TIMEOUT_MILLIS = 60 * 1000; // One minute\r\nconst DEFAULT_CACHE_MAX_AGE_MILLIS = 12 * 60 * 60 * 1000; // Twelve hours.\r\n/**\r\n * Encapsulates business logic mapping network and storage dependencies to the public SDK API.\r\n *\r\n * See {@link https://github.com/FirebasePrivate/firebase-js-sdk/blob/master/packages/firebase/index.d.ts|interface documentation} for method descriptions.\r\n */\r\nclass RemoteConfig {\r\n    constructor(\r\n    // Required by FirebaseServiceFactory interface.\r\n    app, \r\n    // JS doesn't support private yet\r\n    // (https://github.com/tc39/proposal-class-fields#private-fields), so we hint using an\r\n    // underscore prefix.\r\n    /**\r\n     * @internal\r\n     */\r\n    _client, \r\n    /**\r\n     * @internal\r\n     */\r\n    _storageCache, \r\n    /**\r\n     * @internal\r\n     */\r\n    _storage, \r\n    /**\r\n     * @internal\r\n     */\r\n    _logger) {\r\n        this.app = app;\r\n        this._client = _client;\r\n        this._storageCache = _storageCache;\r\n        this._storage = _storage;\r\n        this._logger = _logger;\r\n        /**\r\n         * Tracks completion of initialization promise.\r\n         * @internal\r\n         */\r\n        this._isInitializationComplete = false;\r\n        this.settings = {\r\n            fetchTimeoutMillis: DEFAULT_FETCH_TIMEOUT_MILLIS,\r\n            minimumFetchIntervalMillis: DEFAULT_CACHE_MAX_AGE_MILLIS\r\n        };\r\n        this.defaultConfig = {};\r\n    }\r\n    get fetchTimeMillis() {\r\n        return this._storageCache.getLastSuccessfulFetchTimestampMillis() || -1;\r\n    }\r\n    get lastFetchStatus() {\r\n        return this._storageCache.getLastFetchStatus() || 'no-fetch-yet';\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Converts an error event associated with a {@link IDBRequest} to a {@link FirebaseError}.\r\n */\r\nfunction toFirebaseError(event, errorCode) {\r\n    const originalError = event.target.error || undefined;\r\n    return ERROR_FACTORY.create(errorCode, {\r\n        originalErrorMessage: originalError && (originalError === null || originalError === void 0 ? void 0 : originalError.message)\r\n    });\r\n}\r\n/**\r\n * A general-purpose store keyed by app + namespace + {@link\r\n * ProjectNamespaceKeyFieldValue}.\r\n *\r\n * <p>The Remote Config SDK can be used with multiple app installations, and each app can interact\r\n * with multiple namespaces, so this store uses app (ID + name) and namespace as common parent keys\r\n * for a set of key-value pairs. See {@link Storage#createCompositeKey}.\r\n *\r\n * <p>Visible for testing.\r\n */\r\nconst APP_NAMESPACE_STORE = 'app_namespace_store';\r\nconst DB_NAME = 'firebase_remote_config';\r\nconst DB_VERSION = 1;\r\n// Visible for testing.\r\nfunction openDatabase() {\r\n    return new Promise((resolve, reject) => {\r\n        try {\r\n            const request = indexedDB.open(DB_NAME, DB_VERSION);\r\n            request.onerror = event => {\r\n                reject(toFirebaseError(event, \"storage-open\" /* ErrorCode.STORAGE_OPEN */));\r\n            };\r\n            request.onsuccess = event => {\r\n                resolve(event.target.result);\r\n            };\r\n            request.onupgradeneeded = event => {\r\n                const db = event.target.result;\r\n                // We don't use 'break' in this switch statement, the fall-through\r\n                // behavior is what we want, because if there are multiple versions between\r\n                // the old version and the current version, we want ALL the migrations\r\n                // that correspond to those versions to run, not only the last one.\r\n                // eslint-disable-next-line default-case\r\n                switch (event.oldVersion) {\r\n                    case 0:\r\n                        db.createObjectStore(APP_NAMESPACE_STORE, {\r\n                            keyPath: 'compositeKey'\r\n                        });\r\n                }\r\n            };\r\n        }\r\n        catch (error) {\r\n            reject(ERROR_FACTORY.create(\"storage-open\" /* ErrorCode.STORAGE_OPEN */, {\r\n                originalErrorMessage: error === null || error === void 0 ? void 0 : error.message\r\n            }));\r\n        }\r\n    });\r\n}\r\n/**\r\n * Abstracts data persistence.\r\n */\r\nclass Storage {\r\n    /**\r\n     * @param appId enables storage segmentation by app (ID + name).\r\n     * @param appName enables storage segmentation by app (ID + name).\r\n     * @param namespace enables storage segmentation by namespace.\r\n     */\r\n    constructor(appId, appName, namespace, openDbPromise = openDatabase()) {\r\n        this.appId = appId;\r\n        this.appName = appName;\r\n        this.namespace = namespace;\r\n        this.openDbPromise = openDbPromise;\r\n    }\r\n    getLastFetchStatus() {\r\n        return this.get('last_fetch_status');\r\n    }\r\n    setLastFetchStatus(status) {\r\n        return this.set('last_fetch_status', status);\r\n    }\r\n    // This is comparable to a cache entry timestamp. If we need to expire other data, we could\r\n    // consider adding timestamp to all storage records and an optional max age arg to getters.\r\n    getLastSuccessfulFetchTimestampMillis() {\r\n        return this.get('last_successful_fetch_timestamp_millis');\r\n    }\r\n    setLastSuccessfulFetchTimestampMillis(timestamp) {\r\n        return this.set('last_successful_fetch_timestamp_millis', timestamp);\r\n    }\r\n    getLastSuccessfulFetchResponse() {\r\n        return this.get('last_successful_fetch_response');\r\n    }\r\n    setLastSuccessfulFetchResponse(response) {\r\n        return this.set('last_successful_fetch_response', response);\r\n    }\r\n    getActiveConfig() {\r\n        return this.get('active_config');\r\n    }\r\n    setActiveConfig(config) {\r\n        return this.set('active_config', config);\r\n    }\r\n    getActiveConfigEtag() {\r\n        return this.get('active_config_etag');\r\n    }\r\n    setActiveConfigEtag(etag) {\r\n        return this.set('active_config_etag', etag);\r\n    }\r\n    getThrottleMetadata() {\r\n        return this.get('throttle_metadata');\r\n    }\r\n    setThrottleMetadata(metadata) {\r\n        return this.set('throttle_metadata', metadata);\r\n    }\r\n    deleteThrottleMetadata() {\r\n        return this.delete('throttle_metadata');\r\n    }\r\n    async get(key) {\r\n        const db = await this.openDbPromise;\r\n        return new Promise((resolve, reject) => {\r\n            const transaction = db.transaction([APP_NAMESPACE_STORE], 'readonly');\r\n            const objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\r\n            const compositeKey = this.createCompositeKey(key);\r\n            try {\r\n                const request = objectStore.get(compositeKey);\r\n                request.onerror = event => {\r\n                    reject(toFirebaseError(event, \"storage-get\" /* ErrorCode.STORAGE_GET */));\r\n                };\r\n                request.onsuccess = event => {\r\n                    const result = event.target.result;\r\n                    if (result) {\r\n                        resolve(result.value);\r\n                    }\r\n                    else {\r\n                        resolve(undefined);\r\n                    }\r\n                };\r\n            }\r\n            catch (e) {\r\n                reject(ERROR_FACTORY.create(\"storage-get\" /* ErrorCode.STORAGE_GET */, {\r\n                    originalErrorMessage: e === null || e === void 0 ? void 0 : e.message\r\n                }));\r\n            }\r\n        });\r\n    }\r\n    async set(key, value) {\r\n        const db = await this.openDbPromise;\r\n        return new Promise((resolve, reject) => {\r\n            const transaction = db.transaction([APP_NAMESPACE_STORE], 'readwrite');\r\n            const objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\r\n            const compositeKey = this.createCompositeKey(key);\r\n            try {\r\n                const request = objectStore.put({\r\n                    compositeKey,\r\n                    value\r\n                });\r\n                request.onerror = (event) => {\r\n                    reject(toFirebaseError(event, \"storage-set\" /* ErrorCode.STORAGE_SET */));\r\n                };\r\n                request.onsuccess = () => {\r\n                    resolve();\r\n                };\r\n            }\r\n            catch (e) {\r\n                reject(ERROR_FACTORY.create(\"storage-set\" /* ErrorCode.STORAGE_SET */, {\r\n                    originalErrorMessage: e === null || e === void 0 ? void 0 : e.message\r\n                }));\r\n            }\r\n        });\r\n    }\r\n    async delete(key) {\r\n        const db = await this.openDbPromise;\r\n        return new Promise((resolve, reject) => {\r\n            const transaction = db.transaction([APP_NAMESPACE_STORE], 'readwrite');\r\n            const objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\r\n            const compositeKey = this.createCompositeKey(key);\r\n            try {\r\n                const request = objectStore.delete(compositeKey);\r\n                request.onerror = (event) => {\r\n                    reject(toFirebaseError(event, \"storage-delete\" /* ErrorCode.STORAGE_DELETE */));\r\n                };\r\n                request.onsuccess = () => {\r\n                    resolve();\r\n                };\r\n            }\r\n            catch (e) {\r\n                reject(ERROR_FACTORY.create(\"storage-delete\" /* ErrorCode.STORAGE_DELETE */, {\r\n                    originalErrorMessage: e === null || e === void 0 ? void 0 : e.message\r\n                }));\r\n            }\r\n        });\r\n    }\r\n    // Facilitates composite key functionality (which is unsupported in IE).\r\n    createCompositeKey(key) {\r\n        return [this.appId, this.appName, this.namespace, key].join();\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A memory cache layer over storage to support the SDK's synchronous read requirements.\r\n */\r\nclass StorageCache {\r\n    constructor(storage) {\r\n        this.storage = storage;\r\n    }\r\n    /**\r\n     * Memory-only getters\r\n     */\r\n    getLastFetchStatus() {\r\n        return this.lastFetchStatus;\r\n    }\r\n    getLastSuccessfulFetchTimestampMillis() {\r\n        return this.lastSuccessfulFetchTimestampMillis;\r\n    }\r\n    getActiveConfig() {\r\n        return this.activeConfig;\r\n    }\r\n    /**\r\n     * Read-ahead getter\r\n     */\r\n    async loadFromStorage() {\r\n        const lastFetchStatusPromise = this.storage.getLastFetchStatus();\r\n        const lastSuccessfulFetchTimestampMillisPromise = this.storage.getLastSuccessfulFetchTimestampMillis();\r\n        const activeConfigPromise = this.storage.getActiveConfig();\r\n        // Note:\r\n        // 1. we consistently check for undefined to avoid clobbering defined values\r\n        //   in memory\r\n        // 2. we defer awaiting to improve readability, as opposed to destructuring\r\n        //   a Promise.all result, for example\r\n        const lastFetchStatus = await lastFetchStatusPromise;\r\n        if (lastFetchStatus) {\r\n            this.lastFetchStatus = lastFetchStatus;\r\n        }\r\n        const lastSuccessfulFetchTimestampMillis = await lastSuccessfulFetchTimestampMillisPromise;\r\n        if (lastSuccessfulFetchTimestampMillis) {\r\n            this.lastSuccessfulFetchTimestampMillis =\r\n                lastSuccessfulFetchTimestampMillis;\r\n        }\r\n        const activeConfig = await activeConfigPromise;\r\n        if (activeConfig) {\r\n            this.activeConfig = activeConfig;\r\n        }\r\n    }\r\n    /**\r\n     * Write-through setters\r\n     */\r\n    setLastFetchStatus(status) {\r\n        this.lastFetchStatus = status;\r\n        return this.storage.setLastFetchStatus(status);\r\n    }\r\n    setLastSuccessfulFetchTimestampMillis(timestampMillis) {\r\n        this.lastSuccessfulFetchTimestampMillis = timestampMillis;\r\n        return this.storage.setLastSuccessfulFetchTimestampMillis(timestampMillis);\r\n    }\r\n    setActiveConfig(activeConfig) {\r\n        this.activeConfig = activeConfig;\r\n        return this.storage.setActiveConfig(activeConfig);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction registerRemoteConfig() {\r\n    _registerComponent(new Component(RC_COMPONENT_NAME, remoteConfigFactory, \"PUBLIC\" /* ComponentType.PUBLIC */).setMultipleInstances(true));\r\n    registerVersion(name, version);\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name, version, 'esm2017');\r\n    function remoteConfigFactory(container, { instanceIdentifier: namespace }) {\r\n        /* Dependencies */\r\n        // getImmediate for FirebaseApp will always succeed\r\n        const app = container.getProvider('app').getImmediate();\r\n        // The following call will always succeed because rc has `import '@firebase/installations'`\r\n        const installations = container\r\n            .getProvider('installations-internal')\r\n            .getImmediate();\r\n        // Guards against the SDK being used in non-browser environments.\r\n        if (typeof window === 'undefined') {\r\n            throw ERROR_FACTORY.create(\"registration-window\" /* ErrorCode.REGISTRATION_WINDOW */);\r\n        }\r\n        // Guards against the SDK being used when indexedDB is not available.\r\n        if (!isIndexedDBAvailable()) {\r\n            throw ERROR_FACTORY.create(\"indexed-db-unavailable\" /* ErrorCode.INDEXED_DB_UNAVAILABLE */);\r\n        }\r\n        // Normalizes optional inputs.\r\n        const { projectId, apiKey, appId } = app.options;\r\n        if (!projectId) {\r\n            throw ERROR_FACTORY.create(\"registration-project-id\" /* ErrorCode.REGISTRATION_PROJECT_ID */);\r\n        }\r\n        if (!apiKey) {\r\n            throw ERROR_FACTORY.create(\"registration-api-key\" /* ErrorCode.REGISTRATION_API_KEY */);\r\n        }\r\n        if (!appId) {\r\n            throw ERROR_FACTORY.create(\"registration-app-id\" /* ErrorCode.REGISTRATION_APP_ID */);\r\n        }\r\n        namespace = namespace || 'firebase';\r\n        const storage = new Storage(appId, app.name, namespace);\r\n        const storageCache = new StorageCache(storage);\r\n        const logger = new Logger(name);\r\n        // Sets ERROR as the default log level.\r\n        // See RemoteConfig#setLogLevel for corresponding normalization to ERROR log level.\r\n        logger.logLevel = LogLevel.ERROR;\r\n        const restClient = new RestClient(installations, \r\n        // Uses the JS SDK version, by which the RC package version can be deduced, if necessary.\r\n        SDK_VERSION, namespace, projectId, apiKey, appId);\r\n        const retryingClient = new RetryingClient(restClient, storage);\r\n        const cachingClient = new CachingClient(retryingClient, storage, storageCache, logger);\r\n        const remoteConfigInstance = new RemoteConfig(app, cachingClient, storageCache, storage, logger);\r\n        // Starts warming cache.\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        ensureInitialized(remoteConfigInstance);\r\n        return remoteConfigInstance;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// This API is put in a separate file, so we can stub fetchConfig and activate in tests.\r\n// It's not possible to stub standalone functions from the same module.\r\n/**\r\n *\r\n * Performs fetch and activate operations, as a convenience.\r\n *\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n *\r\n * @returns A `Promise` which resolves to true if the current call activated the fetched configs.\r\n * If the fetched configs were already activated, the `Promise` will resolve to false.\r\n *\r\n * @public\r\n */\r\nasync function fetchAndActivate(remoteConfig) {\r\n    remoteConfig = getModularInstance(remoteConfig);\r\n    await fetchConfig(remoteConfig);\r\n    return activate(remoteConfig);\r\n}\r\n/**\r\n * This method provides two different checks:\r\n *\r\n * 1. Check if IndexedDB exists in the browser environment.\r\n * 2. Check if the current browser context allows IndexedDB `open()` calls.\r\n *\r\n * @returns A `Promise` which resolves to true if a {@link RemoteConfig} instance\r\n * can be initialized in this environment, or false if it cannot.\r\n * @public\r\n */\r\nasync function isSupported() {\r\n    if (!isIndexedDBAvailable()) {\r\n        return false;\r\n    }\r\n    try {\r\n        const isDBOpenable = await validateIndexedDBOpenable();\r\n        return isDBOpenable;\r\n    }\r\n    catch (error) {\r\n        return false;\r\n    }\r\n}\n\n/**\r\n * Firebase Remote Config\r\n *\r\n * @packageDocumentation\r\n */\r\n/** register component and version */\r\nregisterRemoteConfig();\n\nexport { activate, ensureInitialized, fetchAndActivate, fetchConfig, getAll, getBoolean, getNumber, getRemoteConfig, getString, getValue, isSupported, setLogLevel };\n\n", "const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst cursorRequestMap = new WeakMap();\nconst transactionDoneMap = new WeakMap();\nconst transactionStoreNamesMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    promise\n        .then((value) => {\n        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval\n        // (see wrapFunction).\n        if (value instanceof IDBCursor) {\n            cursorRequestMap.set(value, request);\n        }\n        // Catching to avoid \"Uncaught Promise exceptions\"\n    })\n        .catch(() => { });\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Polyfill for objectStoreNames because of Edge.\n            if (prop === 'objectStoreNames') {\n                return target.objectStoreNames || transactionStoreNamesMap.get(target);\n            }\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.\n    if (func === IDBDatabase.prototype.transaction &&\n        !('objectStoreNames' in IDBTransaction.prototype)) {\n        return function (storeNames, ...args) {\n            const tx = func.call(unwrap(this), storeNames, ...args);\n            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);\n            return wrap(tx);\n        };\n    }\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(cursorRequestMap.get(this));\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\nexport { reverseTransformCache as a, instanceOfAny as i, replaceTraps as r, unwrap as u, wrap as w };\n", "import { w as wrap, r as replaceTraps } from './wrap-idb-value.js';\nexport { u as unwrap, w as wrap } from './wrap-idb-value.js';\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction));\n        });\n    }\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking)\n            db.addEventListener('versionchange', () => blocking());\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nexport { deleteDB, openDB };\n", "import '@firebase/installations';\nimport { Component } from '@firebase/component';\nimport { openDB, deleteDB } from 'idb';\nimport { ErrorFactory, validateIndexedDBOpenable, isIndexedDBAvailable, areCookiesEnabled, getModularInstance } from '@firebase/util';\nimport { _registerComponent, registerVersion, _getProvider, getApp } from '@firebase/app';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DEFAULT_SW_PATH = '/firebase-messaging-sw.js';\r\nconst DEFAULT_SW_SCOPE = '/firebase-cloud-messaging-push-scope';\r\nconst DEFAULT_VAPID_KEY = 'BDOU99-h67HcA6JeFXHbSNMu7e2yNNu3RzoMj8TM4W88jITfq7ZmPvIM1Iv-4_l2LxQcYwhqby2xGpWwzjfAnG4';\r\nconst ENDPOINT = 'https://fcmregistrations.googleapis.com/v1';\r\nconst CONSOLE_CAMPAIGN_ID = 'google.c.a.c_id';\r\nconst CONSOLE_CAMPAIGN_NAME = 'google.c.a.c_l';\r\nconst CONSOLE_CAMPAIGN_TIME = 'google.c.a.ts';\r\n/** Set to '1' if Analytics is enabled for the campaign */\r\nconst CONSOLE_CAMPAIGN_ANALYTICS_ENABLED = 'google.c.a.e';\r\nvar MessageType$1;\r\n(function (MessageType) {\r\n    MessageType[MessageType[\"DATA_MESSAGE\"] = 1] = \"DATA_MESSAGE\";\r\n    MessageType[MessageType[\"DISPLAY_NOTIFICATION\"] = 3] = \"DISPLAY_NOTIFICATION\";\r\n})(MessageType$1 || (MessageType$1 = {}));\n\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\r\n * in compliance with the License. You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software distributed under the License\r\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\r\n * or implied. See the License for the specific language governing permissions and limitations under\r\n * the License.\r\n */\r\nvar MessageType;\r\n(function (MessageType) {\r\n    MessageType[\"PUSH_RECEIVED\"] = \"push-received\";\r\n    MessageType[\"NOTIFICATION_CLICKED\"] = \"notification-clicked\";\r\n})(MessageType || (MessageType = {}));\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction arrayToBase64(array) {\r\n    const uint8Array = new Uint8Array(array);\r\n    const base64String = btoa(String.fromCharCode(...uint8Array));\r\n    return base64String.replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_');\r\n}\r\nfunction base64ToArray(base64String) {\r\n    const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\r\n    const base64 = (base64String + padding)\r\n        .replace(/\\-/g, '+')\r\n        .replace(/_/g, '/');\r\n    const rawData = atob(base64);\r\n    const outputArray = new Uint8Array(rawData.length);\r\n    for (let i = 0; i < rawData.length; ++i) {\r\n        outputArray[i] = rawData.charCodeAt(i);\r\n    }\r\n    return outputArray;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst OLD_DB_NAME = 'fcm_token_details_db';\r\n/**\r\n * The last DB version of 'fcm_token_details_db' was 4. This is one higher, so that the upgrade\r\n * callback is called for all versions of the old DB.\r\n */\r\nconst OLD_DB_VERSION = 5;\r\nconst OLD_OBJECT_STORE_NAME = 'fcm_token_object_Store';\r\nasync function migrateOldDatabase(senderId) {\r\n    if ('databases' in indexedDB) {\r\n        // indexedDb.databases() is an IndexedDB v3 API and does not exist in all browsers. TODO: Remove\r\n        // typecast when it lands in TS types.\r\n        const databases = await indexedDB.databases();\r\n        const dbNames = databases.map(db => db.name);\r\n        if (!dbNames.includes(OLD_DB_NAME)) {\r\n            // old DB didn't exist, no need to open.\r\n            return null;\r\n        }\r\n    }\r\n    let tokenDetails = null;\r\n    const db = await openDB(OLD_DB_NAME, OLD_DB_VERSION, {\r\n        upgrade: async (db, oldVersion, newVersion, upgradeTransaction) => {\r\n            var _a;\r\n            if (oldVersion < 2) {\r\n                // Database too old, skip migration.\r\n                return;\r\n            }\r\n            if (!db.objectStoreNames.contains(OLD_OBJECT_STORE_NAME)) {\r\n                // Database did not exist. Nothing to do.\r\n                return;\r\n            }\r\n            const objectStore = upgradeTransaction.objectStore(OLD_OBJECT_STORE_NAME);\r\n            const value = await objectStore.index('fcmSenderId').get(senderId);\r\n            await objectStore.clear();\r\n            if (!value) {\r\n                // No entry in the database, nothing to migrate.\r\n                return;\r\n            }\r\n            if (oldVersion === 2) {\r\n                const oldDetails = value;\r\n                if (!oldDetails.auth || !oldDetails.p256dh || !oldDetails.endpoint) {\r\n                    return;\r\n                }\r\n                tokenDetails = {\r\n                    token: oldDetails.fcmToken,\r\n                    createTime: (_a = oldDetails.createTime) !== null && _a !== void 0 ? _a : Date.now(),\r\n                    subscriptionOptions: {\r\n                        auth: oldDetails.auth,\r\n                        p256dh: oldDetails.p256dh,\r\n                        endpoint: oldDetails.endpoint,\r\n                        swScope: oldDetails.swScope,\r\n                        vapidKey: typeof oldDetails.vapidKey === 'string'\r\n                            ? oldDetails.vapidKey\r\n                            : arrayToBase64(oldDetails.vapidKey)\r\n                    }\r\n                };\r\n            }\r\n            else if (oldVersion === 3) {\r\n                const oldDetails = value;\r\n                tokenDetails = {\r\n                    token: oldDetails.fcmToken,\r\n                    createTime: oldDetails.createTime,\r\n                    subscriptionOptions: {\r\n                        auth: arrayToBase64(oldDetails.auth),\r\n                        p256dh: arrayToBase64(oldDetails.p256dh),\r\n                        endpoint: oldDetails.endpoint,\r\n                        swScope: oldDetails.swScope,\r\n                        vapidKey: arrayToBase64(oldDetails.vapidKey)\r\n                    }\r\n                };\r\n            }\r\n            else if (oldVersion === 4) {\r\n                const oldDetails = value;\r\n                tokenDetails = {\r\n                    token: oldDetails.fcmToken,\r\n                    createTime: oldDetails.createTime,\r\n                    subscriptionOptions: {\r\n                        auth: arrayToBase64(oldDetails.auth),\r\n                        p256dh: arrayToBase64(oldDetails.p256dh),\r\n                        endpoint: oldDetails.endpoint,\r\n                        swScope: oldDetails.swScope,\r\n                        vapidKey: arrayToBase64(oldDetails.vapidKey)\r\n                    }\r\n                };\r\n            }\r\n        }\r\n    });\r\n    db.close();\r\n    // Delete all old databases.\r\n    await deleteDB(OLD_DB_NAME);\r\n    await deleteDB('fcm_vapid_details_db');\r\n    await deleteDB('undefined');\r\n    return checkTokenDetails(tokenDetails) ? tokenDetails : null;\r\n}\r\nfunction checkTokenDetails(tokenDetails) {\r\n    if (!tokenDetails || !tokenDetails.subscriptionOptions) {\r\n        return false;\r\n    }\r\n    const { subscriptionOptions } = tokenDetails;\r\n    return (typeof tokenDetails.createTime === 'number' &&\r\n        tokenDetails.createTime > 0 &&\r\n        typeof tokenDetails.token === 'string' &&\r\n        tokenDetails.token.length > 0 &&\r\n        typeof subscriptionOptions.auth === 'string' &&\r\n        subscriptionOptions.auth.length > 0 &&\r\n        typeof subscriptionOptions.p256dh === 'string' &&\r\n        subscriptionOptions.p256dh.length > 0 &&\r\n        typeof subscriptionOptions.endpoint === 'string' &&\r\n        subscriptionOptions.endpoint.length > 0 &&\r\n        typeof subscriptionOptions.swScope === 'string' &&\r\n        subscriptionOptions.swScope.length > 0 &&\r\n        typeof subscriptionOptions.vapidKey === 'string' &&\r\n        subscriptionOptions.vapidKey.length > 0);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Exported for tests.\r\nconst DATABASE_NAME = 'firebase-messaging-database';\r\nconst DATABASE_VERSION = 1;\r\nconst OBJECT_STORE_NAME = 'firebase-messaging-store';\r\nlet dbPromise = null;\r\nfunction getDbPromise() {\r\n    if (!dbPromise) {\r\n        dbPromise = openDB(DATABASE_NAME, DATABASE_VERSION, {\r\n            upgrade: (upgradeDb, oldVersion) => {\r\n                // We don't use 'break' in this switch statement, the fall-through behavior is what we want,\r\n                // because if there are multiple versions between the old version and the current version, we\r\n                // want ALL the migrations that correspond to those versions to run, not only the last one.\r\n                // eslint-disable-next-line default-case\r\n                switch (oldVersion) {\r\n                    case 0:\r\n                        upgradeDb.createObjectStore(OBJECT_STORE_NAME);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    return dbPromise;\r\n}\r\n/** Gets record(s) from the objectStore that match the given key. */\r\nasync function dbGet(firebaseDependencies) {\r\n    const key = getKey(firebaseDependencies);\r\n    const db = await getDbPromise();\r\n    const tokenDetails = (await db\r\n        .transaction(OBJECT_STORE_NAME)\r\n        .objectStore(OBJECT_STORE_NAME)\r\n        .get(key));\r\n    if (tokenDetails) {\r\n        return tokenDetails;\r\n    }\r\n    else {\r\n        // Check if there is a tokenDetails object in the old DB.\r\n        const oldTokenDetails = await migrateOldDatabase(firebaseDependencies.appConfig.senderId);\r\n        if (oldTokenDetails) {\r\n            await dbSet(firebaseDependencies, oldTokenDetails);\r\n            return oldTokenDetails;\r\n        }\r\n    }\r\n}\r\n/** Assigns or overwrites the record for the given key with the given value. */\r\nasync function dbSet(firebaseDependencies, tokenDetails) {\r\n    const key = getKey(firebaseDependencies);\r\n    const db = await getDbPromise();\r\n    const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\r\n    await tx.objectStore(OBJECT_STORE_NAME).put(tokenDetails, key);\r\n    await tx.done;\r\n    return tokenDetails;\r\n}\r\n/** Removes record(s) from the objectStore that match the given key. */\r\nasync function dbRemove(firebaseDependencies) {\r\n    const key = getKey(firebaseDependencies);\r\n    const db = await getDbPromise();\r\n    const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\r\n    await tx.objectStore(OBJECT_STORE_NAME).delete(key);\r\n    await tx.done;\r\n}\r\nfunction getKey({ appConfig }) {\r\n    return appConfig.appId;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst ERROR_MAP = {\r\n    [\"missing-app-config-values\" /* ErrorCode.MISSING_APP_CONFIG_VALUES */]: 'Missing App configuration value: \"{$valueName}\"',\r\n    [\"only-available-in-window\" /* ErrorCode.AVAILABLE_IN_WINDOW */]: 'This method is available in a Window context.',\r\n    [\"only-available-in-sw\" /* ErrorCode.AVAILABLE_IN_SW */]: 'This method is available in a service worker context.',\r\n    [\"permission-default\" /* ErrorCode.PERMISSION_DEFAULT */]: 'The notification permission was not granted and dismissed instead.',\r\n    [\"permission-blocked\" /* ErrorCode.PERMISSION_BLOCKED */]: 'The notification permission was not granted and blocked instead.',\r\n    [\"unsupported-browser\" /* ErrorCode.UNSUPPORTED_BROWSER */]: \"This browser doesn't support the API's required to use the Firebase SDK.\",\r\n    [\"indexed-db-unsupported\" /* ErrorCode.INDEXED_DB_UNSUPPORTED */]: \"This browser doesn't support indexedDb.open() (ex. Safari iFrame, Firefox Private Browsing, etc)\",\r\n    [\"failed-service-worker-registration\" /* ErrorCode.FAILED_DEFAULT_REGISTRATION */]: 'We are unable to register the default service worker. {$browserErrorMessage}',\r\n    [\"token-subscribe-failed\" /* ErrorCode.TOKEN_SUBSCRIBE_FAILED */]: 'A problem occurred while subscribing the user to FCM: {$errorInfo}',\r\n    [\"token-subscribe-no-token\" /* ErrorCode.TOKEN_SUBSCRIBE_NO_TOKEN */]: 'FCM returned no token when subscribing the user to push.',\r\n    [\"token-unsubscribe-failed\" /* ErrorCode.TOKEN_UNSUBSCRIBE_FAILED */]: 'A problem occurred while unsubscribing the ' +\r\n        'user from FCM: {$errorInfo}',\r\n    [\"token-update-failed\" /* ErrorCode.TOKEN_UPDATE_FAILED */]: 'A problem occurred while updating the user from FCM: {$errorInfo}',\r\n    [\"token-update-no-token\" /* ErrorCode.TOKEN_UPDATE_NO_TOKEN */]: 'FCM returned no token when updating the user to push.',\r\n    [\"use-sw-after-get-token\" /* ErrorCode.USE_SW_AFTER_GET_TOKEN */]: 'The useServiceWorker() method may only be called once and must be ' +\r\n        'called before calling getToken() to ensure your service worker is used.',\r\n    [\"invalid-sw-registration\" /* ErrorCode.INVALID_SW_REGISTRATION */]: 'The input to useServiceWorker() must be a ServiceWorkerRegistration.',\r\n    [\"invalid-bg-handler\" /* ErrorCode.INVALID_BG_HANDLER */]: 'The input to setBackgroundMessageHandler() must be a function.',\r\n    [\"invalid-vapid-key\" /* ErrorCode.INVALID_VAPID_KEY */]: 'The public VAPID key must be a string.',\r\n    [\"use-vapid-key-after-get-token\" /* ErrorCode.USE_VAPID_KEY_AFTER_GET_TOKEN */]: 'The usePublicVapidKey() method may only be called once and must be ' +\r\n        'called before calling getToken() to ensure your VAPID key is used.'\r\n};\r\nconst ERROR_FACTORY = new ErrorFactory('messaging', 'Messaging', ERROR_MAP);\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function requestGetToken(firebaseDependencies, subscriptionOptions) {\r\n    const headers = await getHeaders(firebaseDependencies);\r\n    const body = getBody(subscriptionOptions);\r\n    const subscribeOptions = {\r\n        method: 'POST',\r\n        headers,\r\n        body: JSON.stringify(body)\r\n    };\r\n    let responseData;\r\n    try {\r\n        const response = await fetch(getEndpoint(firebaseDependencies.appConfig), subscribeOptions);\r\n        responseData = await response.json();\r\n    }\r\n    catch (err) {\r\n        throw ERROR_FACTORY.create(\"token-subscribe-failed\" /* ErrorCode.TOKEN_SUBSCRIBE_FAILED */, {\r\n            errorInfo: err === null || err === void 0 ? void 0 : err.toString()\r\n        });\r\n    }\r\n    if (responseData.error) {\r\n        const message = responseData.error.message;\r\n        throw ERROR_FACTORY.create(\"token-subscribe-failed\" /* ErrorCode.TOKEN_SUBSCRIBE_FAILED */, {\r\n            errorInfo: message\r\n        });\r\n    }\r\n    if (!responseData.token) {\r\n        throw ERROR_FACTORY.create(\"token-subscribe-no-token\" /* ErrorCode.TOKEN_SUBSCRIBE_NO_TOKEN */);\r\n    }\r\n    return responseData.token;\r\n}\r\nasync function requestUpdateToken(firebaseDependencies, tokenDetails) {\r\n    const headers = await getHeaders(firebaseDependencies);\r\n    const body = getBody(tokenDetails.subscriptionOptions);\r\n    const updateOptions = {\r\n        method: 'PATCH',\r\n        headers,\r\n        body: JSON.stringify(body)\r\n    };\r\n    let responseData;\r\n    try {\r\n        const response = await fetch(`${getEndpoint(firebaseDependencies.appConfig)}/${tokenDetails.token}`, updateOptions);\r\n        responseData = await response.json();\r\n    }\r\n    catch (err) {\r\n        throw ERROR_FACTORY.create(\"token-update-failed\" /* ErrorCode.TOKEN_UPDATE_FAILED */, {\r\n            errorInfo: err === null || err === void 0 ? void 0 : err.toString()\r\n        });\r\n    }\r\n    if (responseData.error) {\r\n        const message = responseData.error.message;\r\n        throw ERROR_FACTORY.create(\"token-update-failed\" /* ErrorCode.TOKEN_UPDATE_FAILED */, {\r\n            errorInfo: message\r\n        });\r\n    }\r\n    if (!responseData.token) {\r\n        throw ERROR_FACTORY.create(\"token-update-no-token\" /* ErrorCode.TOKEN_UPDATE_NO_TOKEN */);\r\n    }\r\n    return responseData.token;\r\n}\r\nasync function requestDeleteToken(firebaseDependencies, token) {\r\n    const headers = await getHeaders(firebaseDependencies);\r\n    const unsubscribeOptions = {\r\n        method: 'DELETE',\r\n        headers\r\n    };\r\n    try {\r\n        const response = await fetch(`${getEndpoint(firebaseDependencies.appConfig)}/${token}`, unsubscribeOptions);\r\n        const responseData = await response.json();\r\n        if (responseData.error) {\r\n            const message = responseData.error.message;\r\n            throw ERROR_FACTORY.create(\"token-unsubscribe-failed\" /* ErrorCode.TOKEN_UNSUBSCRIBE_FAILED */, {\r\n                errorInfo: message\r\n            });\r\n        }\r\n    }\r\n    catch (err) {\r\n        throw ERROR_FACTORY.create(\"token-unsubscribe-failed\" /* ErrorCode.TOKEN_UNSUBSCRIBE_FAILED */, {\r\n            errorInfo: err === null || err === void 0 ? void 0 : err.toString()\r\n        });\r\n    }\r\n}\r\nfunction getEndpoint({ projectId }) {\r\n    return `${ENDPOINT}/projects/${projectId}/registrations`;\r\n}\r\nasync function getHeaders({ appConfig, installations }) {\r\n    const authToken = await installations.getToken();\r\n    return new Headers({\r\n        'Content-Type': 'application/json',\r\n        Accept: 'application/json',\r\n        'x-goog-api-key': appConfig.apiKey,\r\n        'x-goog-firebase-installations-auth': `FIS ${authToken}`\r\n    });\r\n}\r\nfunction getBody({ p256dh, auth, endpoint, vapidKey }) {\r\n    const body = {\r\n        web: {\r\n            endpoint,\r\n            auth,\r\n            p256dh\r\n        }\r\n    };\r\n    if (vapidKey !== DEFAULT_VAPID_KEY) {\r\n        body.web.applicationPubKey = vapidKey;\r\n    }\r\n    return body;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// UpdateRegistration will be called once every week.\r\nconst TOKEN_EXPIRATION_MS = 7 * 24 * 60 * 60 * 1000; // 7 days\r\nasync function getTokenInternal(messaging) {\r\n    const pushSubscription = await getPushSubscription(messaging.swRegistration, messaging.vapidKey);\r\n    const subscriptionOptions = {\r\n        vapidKey: messaging.vapidKey,\r\n        swScope: messaging.swRegistration.scope,\r\n        endpoint: pushSubscription.endpoint,\r\n        auth: arrayToBase64(pushSubscription.getKey('auth')),\r\n        p256dh: arrayToBase64(pushSubscription.getKey('p256dh'))\r\n    };\r\n    const tokenDetails = await dbGet(messaging.firebaseDependencies);\r\n    if (!tokenDetails) {\r\n        // No token, get a new one.\r\n        return getNewToken(messaging.firebaseDependencies, subscriptionOptions);\r\n    }\r\n    else if (!isTokenValid(tokenDetails.subscriptionOptions, subscriptionOptions)) {\r\n        // Invalid token, get a new one.\r\n        try {\r\n            await requestDeleteToken(messaging.firebaseDependencies, tokenDetails.token);\r\n        }\r\n        catch (e) {\r\n            // Suppress errors because of #2364\r\n            console.warn(e);\r\n        }\r\n        return getNewToken(messaging.firebaseDependencies, subscriptionOptions);\r\n    }\r\n    else if (Date.now() >= tokenDetails.createTime + TOKEN_EXPIRATION_MS) {\r\n        // Weekly token refresh\r\n        return updateToken(messaging, {\r\n            token: tokenDetails.token,\r\n            createTime: Date.now(),\r\n            subscriptionOptions\r\n        });\r\n    }\r\n    else {\r\n        // Valid token, nothing to do.\r\n        return tokenDetails.token;\r\n    }\r\n}\r\n/**\r\n * This method deletes the token from the database, unsubscribes the token from FCM, and unregisters\r\n * the push subscription if it exists.\r\n */\r\nasync function deleteTokenInternal(messaging) {\r\n    const tokenDetails = await dbGet(messaging.firebaseDependencies);\r\n    if (tokenDetails) {\r\n        await requestDeleteToken(messaging.firebaseDependencies, tokenDetails.token);\r\n        await dbRemove(messaging.firebaseDependencies);\r\n    }\r\n    // Unsubscribe from the push subscription.\r\n    const pushSubscription = await messaging.swRegistration.pushManager.getSubscription();\r\n    if (pushSubscription) {\r\n        return pushSubscription.unsubscribe();\r\n    }\r\n    // If there's no SW, consider it a success.\r\n    return true;\r\n}\r\nasync function updateToken(messaging, tokenDetails) {\r\n    try {\r\n        const updatedToken = await requestUpdateToken(messaging.firebaseDependencies, tokenDetails);\r\n        const updatedTokenDetails = Object.assign(Object.assign({}, tokenDetails), { token: updatedToken, createTime: Date.now() });\r\n        await dbSet(messaging.firebaseDependencies, updatedTokenDetails);\r\n        return updatedToken;\r\n    }\r\n    catch (e) {\r\n        await deleteTokenInternal(messaging);\r\n        throw e;\r\n    }\r\n}\r\nasync function getNewToken(firebaseDependencies, subscriptionOptions) {\r\n    const token = await requestGetToken(firebaseDependencies, subscriptionOptions);\r\n    const tokenDetails = {\r\n        token,\r\n        createTime: Date.now(),\r\n        subscriptionOptions\r\n    };\r\n    await dbSet(firebaseDependencies, tokenDetails);\r\n    return tokenDetails.token;\r\n}\r\n/**\r\n * Gets a PushSubscription for the current user.\r\n */\r\nasync function getPushSubscription(swRegistration, vapidKey) {\r\n    const subscription = await swRegistration.pushManager.getSubscription();\r\n    if (subscription) {\r\n        return subscription;\r\n    }\r\n    return swRegistration.pushManager.subscribe({\r\n        userVisibleOnly: true,\r\n        // Chrome <= 75 doesn't support base64-encoded VAPID key. For backward compatibility, VAPID key\r\n        // submitted to pushManager#subscribe must be of type Uint8Array.\r\n        applicationServerKey: base64ToArray(vapidKey)\r\n    });\r\n}\r\n/**\r\n * Checks if the saved tokenDetails object matches the configuration provided.\r\n */\r\nfunction isTokenValid(dbOptions, currentOptions) {\r\n    const isVapidKeyEqual = currentOptions.vapidKey === dbOptions.vapidKey;\r\n    const isEndpointEqual = currentOptions.endpoint === dbOptions.endpoint;\r\n    const isAuthEqual = currentOptions.auth === dbOptions.auth;\r\n    const isP256dhEqual = currentOptions.p256dh === dbOptions.p256dh;\r\n    return isVapidKeyEqual && isEndpointEqual && isAuthEqual && isP256dhEqual;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction externalizePayload(internalPayload) {\r\n    const payload = {\r\n        from: internalPayload.from,\r\n        // eslint-disable-next-line camelcase\r\n        collapseKey: internalPayload.collapse_key,\r\n        // eslint-disable-next-line camelcase\r\n        messageId: internalPayload.fcmMessageId\r\n    };\r\n    propagateNotificationPayload(payload, internalPayload);\r\n    propagateDataPayload(payload, internalPayload);\r\n    propagateFcmOptions(payload, internalPayload);\r\n    return payload;\r\n}\r\nfunction propagateNotificationPayload(payload, messagePayloadInternal) {\r\n    if (!messagePayloadInternal.notification) {\r\n        return;\r\n    }\r\n    payload.notification = {};\r\n    const title = messagePayloadInternal.notification.title;\r\n    if (!!title) {\r\n        payload.notification.title = title;\r\n    }\r\n    const body = messagePayloadInternal.notification.body;\r\n    if (!!body) {\r\n        payload.notification.body = body;\r\n    }\r\n    const image = messagePayloadInternal.notification.image;\r\n    if (!!image) {\r\n        payload.notification.image = image;\r\n    }\r\n    const icon = messagePayloadInternal.notification.icon;\r\n    if (!!icon) {\r\n        payload.notification.icon = icon;\r\n    }\r\n}\r\nfunction propagateDataPayload(payload, messagePayloadInternal) {\r\n    if (!messagePayloadInternal.data) {\r\n        return;\r\n    }\r\n    payload.data = messagePayloadInternal.data;\r\n}\r\nfunction propagateFcmOptions(payload, messagePayloadInternal) {\r\n    var _a, _b, _c, _d, _e;\r\n    // fcmOptions.link value is written into notification.click_action. see more in b/232072111\r\n    if (!messagePayloadInternal.fcmOptions &&\r\n        !((_a = messagePayloadInternal.notification) === null || _a === void 0 ? void 0 : _a.click_action)) {\r\n        return;\r\n    }\r\n    payload.fcmOptions = {};\r\n    const link = (_c = (_b = messagePayloadInternal.fcmOptions) === null || _b === void 0 ? void 0 : _b.link) !== null && _c !== void 0 ? _c : (_d = messagePayloadInternal.notification) === null || _d === void 0 ? void 0 : _d.click_action;\r\n    if (!!link) {\r\n        payload.fcmOptions.link = link;\r\n    }\r\n    // eslint-disable-next-line camelcase\r\n    const analyticsLabel = (_e = messagePayloadInternal.fcmOptions) === null || _e === void 0 ? void 0 : _e.analytics_label;\r\n    if (!!analyticsLabel) {\r\n        payload.fcmOptions.analyticsLabel = analyticsLabel;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction isConsoleMessage(data) {\r\n    // This message has a campaign ID, meaning it was sent using the Firebase Console.\r\n    return typeof data === 'object' && !!data && CONSOLE_CAMPAIGN_ID in data;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n_mergeStrings('hts/frbslgigp.ogepscmv/ieo/eaylg', 'tp:/ieaeogn-agolai.o/1frlglgc/o');\r\n_mergeStrings('AzSCbw63g1R0nCw85jG8', 'Iaya3yLKwmgvh7cF0q4');\r\nfunction _mergeStrings(s1, s2) {\r\n    const resultArray = [];\r\n    for (let i = 0; i < s1.length; i++) {\r\n        resultArray.push(s1.charAt(i));\r\n        if (i < s2.length) {\r\n            resultArray.push(s2.charAt(i));\r\n        }\r\n    }\r\n    return resultArray.join('');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction extractAppConfig(app) {\r\n    if (!app || !app.options) {\r\n        throw getMissingValueError('App Configuration Object');\r\n    }\r\n    if (!app.name) {\r\n        throw getMissingValueError('App Name');\r\n    }\r\n    // Required app config keys\r\n    const configKeys = [\r\n        'projectId',\r\n        'apiKey',\r\n        'appId',\r\n        'messagingSenderId'\r\n    ];\r\n    const { options } = app;\r\n    for (const keyName of configKeys) {\r\n        if (!options[keyName]) {\r\n            throw getMissingValueError(keyName);\r\n        }\r\n    }\r\n    return {\r\n        appName: app.name,\r\n        projectId: options.projectId,\r\n        apiKey: options.apiKey,\r\n        appId: options.appId,\r\n        senderId: options.messagingSenderId\r\n    };\r\n}\r\nfunction getMissingValueError(valueName) {\r\n    return ERROR_FACTORY.create(\"missing-app-config-values\" /* ErrorCode.MISSING_APP_CONFIG_VALUES */, {\r\n        valueName\r\n    });\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass MessagingService {\r\n    constructor(app, installations, analyticsProvider) {\r\n        // logging is only done with end user consent. Default to false.\r\n        this.deliveryMetricsExportedToBigQueryEnabled = false;\r\n        this.onBackgroundMessageHandler = null;\r\n        this.onMessageHandler = null;\r\n        this.logEvents = [];\r\n        this.isLogServiceStarted = false;\r\n        const appConfig = extractAppConfig(app);\r\n        this.firebaseDependencies = {\r\n            app,\r\n            appConfig,\r\n            installations,\r\n            analyticsProvider\r\n        };\r\n    }\r\n    _delete() {\r\n        return Promise.resolve();\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function registerDefaultSw(messaging) {\r\n    try {\r\n        messaging.swRegistration = await navigator.serviceWorker.register(DEFAULT_SW_PATH, {\r\n            scope: DEFAULT_SW_SCOPE\r\n        });\r\n        // The timing when browser updates sw when sw has an update is unreliable from experiment. It\r\n        // leads to version conflict when the SDK upgrades to a newer version in the main page, but sw\r\n        // is stuck with the old version. For example,\r\n        // https://github.com/firebase/firebase-js-sdk/issues/2590 The following line reliably updates\r\n        // sw if there was an update.\r\n        messaging.swRegistration.update().catch(() => {\r\n            /* it is non blocking and we don't care if it failed */\r\n        });\r\n    }\r\n    catch (e) {\r\n        throw ERROR_FACTORY.create(\"failed-service-worker-registration\" /* ErrorCode.FAILED_DEFAULT_REGISTRATION */, {\r\n            browserErrorMessage: e === null || e === void 0 ? void 0 : e.message\r\n        });\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function updateSwReg(messaging, swRegistration) {\r\n    if (!swRegistration && !messaging.swRegistration) {\r\n        await registerDefaultSw(messaging);\r\n    }\r\n    if (!swRegistration && !!messaging.swRegistration) {\r\n        return;\r\n    }\r\n    if (!(swRegistration instanceof ServiceWorkerRegistration)) {\r\n        throw ERROR_FACTORY.create(\"invalid-sw-registration\" /* ErrorCode.INVALID_SW_REGISTRATION */);\r\n    }\r\n    messaging.swRegistration = swRegistration;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function updateVapidKey(messaging, vapidKey) {\r\n    if (!!vapidKey) {\r\n        messaging.vapidKey = vapidKey;\r\n    }\r\n    else if (!messaging.vapidKey) {\r\n        messaging.vapidKey = DEFAULT_VAPID_KEY;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function getToken$1(messaging, options) {\r\n    if (!navigator) {\r\n        throw ERROR_FACTORY.create(\"only-available-in-window\" /* ErrorCode.AVAILABLE_IN_WINDOW */);\r\n    }\r\n    if (Notification.permission === 'default') {\r\n        await Notification.requestPermission();\r\n    }\r\n    if (Notification.permission !== 'granted') {\r\n        throw ERROR_FACTORY.create(\"permission-blocked\" /* ErrorCode.PERMISSION_BLOCKED */);\r\n    }\r\n    await updateVapidKey(messaging, options === null || options === void 0 ? void 0 : options.vapidKey);\r\n    await updateSwReg(messaging, options === null || options === void 0 ? void 0 : options.serviceWorkerRegistration);\r\n    return getTokenInternal(messaging);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function logToScion(messaging, messageType, data) {\r\n    const eventType = getEventType(messageType);\r\n    const analytics = await messaging.firebaseDependencies.analyticsProvider.get();\r\n    analytics.logEvent(eventType, {\r\n        /* eslint-disable camelcase */\r\n        message_id: data[CONSOLE_CAMPAIGN_ID],\r\n        message_name: data[CONSOLE_CAMPAIGN_NAME],\r\n        message_time: data[CONSOLE_CAMPAIGN_TIME],\r\n        message_device_time: Math.floor(Date.now() / 1000)\r\n        /* eslint-enable camelcase */\r\n    });\r\n}\r\nfunction getEventType(messageType) {\r\n    switch (messageType) {\r\n        case MessageType.NOTIFICATION_CLICKED:\r\n            return 'notification_open';\r\n        case MessageType.PUSH_RECEIVED:\r\n            return 'notification_foreground';\r\n        default:\r\n            throw new Error();\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function messageEventListener(messaging, event) {\r\n    const internalPayload = event.data;\r\n    if (!internalPayload.isFirebaseMessaging) {\r\n        return;\r\n    }\r\n    if (messaging.onMessageHandler &&\r\n        internalPayload.messageType === MessageType.PUSH_RECEIVED) {\r\n        if (typeof messaging.onMessageHandler === 'function') {\r\n            messaging.onMessageHandler(externalizePayload(internalPayload));\r\n        }\r\n        else {\r\n            messaging.onMessageHandler.next(externalizePayload(internalPayload));\r\n        }\r\n    }\r\n    // Log to Scion if applicable\r\n    const dataPayload = internalPayload.data;\r\n    if (isConsoleMessage(dataPayload) &&\r\n        dataPayload[CONSOLE_CAMPAIGN_ANALYTICS_ENABLED] === '1') {\r\n        await logToScion(messaging, internalPayload.messageType, dataPayload);\r\n    }\r\n}\n\nconst name = \"@firebase/messaging\";\nconst version = \"0.12.4\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst WindowMessagingFactory = (container) => {\r\n    const messaging = new MessagingService(container.getProvider('app').getImmediate(), container.getProvider('installations-internal').getImmediate(), container.getProvider('analytics-internal'));\r\n    navigator.serviceWorker.addEventListener('message', e => messageEventListener(messaging, e));\r\n    return messaging;\r\n};\r\nconst WindowMessagingInternalFactory = (container) => {\r\n    const messaging = container\r\n        .getProvider('messaging')\r\n        .getImmediate();\r\n    const messagingInternal = {\r\n        getToken: (options) => getToken$1(messaging, options)\r\n    };\r\n    return messagingInternal;\r\n};\r\nfunction registerMessagingInWindow() {\r\n    _registerComponent(new Component('messaging', WindowMessagingFactory, \"PUBLIC\" /* ComponentType.PUBLIC */));\r\n    _registerComponent(new Component('messaging-internal', WindowMessagingInternalFactory, \"PRIVATE\" /* ComponentType.PRIVATE */));\r\n    registerVersion(name, version);\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name, version, 'esm2017');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Checks if all required APIs exist in the browser.\r\n * @returns a Promise that resolves to a boolean.\r\n *\r\n * @public\r\n */\r\nasync function isWindowSupported() {\r\n    try {\r\n        // This throws if open() is unsupported, so adding it to the conditional\r\n        // statement below can cause an uncaught error.\r\n        await validateIndexedDBOpenable();\r\n    }\r\n    catch (e) {\r\n        return false;\r\n    }\r\n    // firebase-js-sdk/issues/2393 reveals that idb#open in Safari iframe and Firefox private browsing\r\n    // might be prohibited to run. In these contexts, an error would be thrown during the messaging\r\n    // instantiating phase, informing the developers to import/call isSupported for special handling.\r\n    return (typeof window !== 'undefined' &&\r\n        isIndexedDBAvailable() &&\r\n        areCookiesEnabled() &&\r\n        'serviceWorker' in navigator &&\r\n        'PushManager' in window &&\r\n        'Notification' in window &&\r\n        'fetch' in window &&\r\n        ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') &&\r\n        PushSubscription.prototype.hasOwnProperty('getKey'));\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function deleteToken$1(messaging) {\r\n    if (!navigator) {\r\n        throw ERROR_FACTORY.create(\"only-available-in-window\" /* ErrorCode.AVAILABLE_IN_WINDOW */);\r\n    }\r\n    if (!messaging.swRegistration) {\r\n        await registerDefaultSw(messaging);\r\n    }\r\n    return deleteTokenInternal(messaging);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction onMessage$1(messaging, nextOrObserver) {\r\n    if (!navigator) {\r\n        throw ERROR_FACTORY.create(\"only-available-in-window\" /* ErrorCode.AVAILABLE_IN_WINDOW */);\r\n    }\r\n    messaging.onMessageHandler = nextOrObserver;\r\n    return () => {\r\n        messaging.onMessageHandler = null;\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Retrieves a Firebase Cloud Messaging instance.\r\n *\r\n * @returns The Firebase Cloud Messaging instance associated with the provided firebase app.\r\n *\r\n * @public\r\n */\r\nfunction getMessagingInWindow(app = getApp()) {\r\n    // Conscious decision to make this async check non-blocking during the messaging instance\r\n    // initialization phase for performance consideration. An error would be thrown latter for\r\n    // developer's information. Developers can then choose to import and call `isSupported` for\r\n    // special handling.\r\n    isWindowSupported().then(isSupported => {\r\n        // If `isWindowSupported()` resolved, but returned false.\r\n        if (!isSupported) {\r\n            throw ERROR_FACTORY.create(\"unsupported-browser\" /* ErrorCode.UNSUPPORTED_BROWSER */);\r\n        }\r\n    }, _ => {\r\n        // If `isWindowSupported()` rejected.\r\n        throw ERROR_FACTORY.create(\"indexed-db-unsupported\" /* ErrorCode.INDEXED_DB_UNSUPPORTED */);\r\n    });\r\n    return _getProvider(getModularInstance(app), 'messaging').getImmediate();\r\n}\r\n/**\r\n * Subscribes the {@link Messaging} instance to push notifications. Returns an Firebase Cloud\r\n * Messaging registration token that can be used to send push messages to that {@link Messaging}\r\n * instance.\r\n *\r\n * If a notification permission isn't already granted, this method asks the user for permission. The\r\n * returned promise rejects if the user does not allow the app to show notifications.\r\n *\r\n * @param messaging - The {@link Messaging} instance.\r\n * @param options - Provides an optional vapid key and an optinoal service worker registration\r\n *\r\n * @returns The promise resolves with an FCM registration token.\r\n *\r\n * @public\r\n */\r\nasync function getToken(messaging, options) {\r\n    messaging = getModularInstance(messaging);\r\n    return getToken$1(messaging, options);\r\n}\r\n/**\r\n * Deletes the registration token associated with this {@link Messaging} instance and unsubscribes\r\n * the {@link Messaging} instance from the push subscription.\r\n *\r\n * @param messaging - The {@link Messaging} instance.\r\n *\r\n * @returns The promise resolves when the token has been successfully deleted.\r\n *\r\n * @public\r\n */\r\nfunction deleteToken(messaging) {\r\n    messaging = getModularInstance(messaging);\r\n    return deleteToken$1(messaging);\r\n}\r\n/**\r\n * When a push message is received and the user is currently on a page for your origin, the\r\n * message is passed to the page and an `onMessage()` event is dispatched with the payload of\r\n * the push message.\r\n *\r\n *\r\n * @param messaging - The {@link Messaging} instance.\r\n * @param nextOrObserver - This function, or observer object with `next` defined,\r\n *     is called when a message is received and the user is currently viewing your page.\r\n * @returns To stop listening for messages execute this returned function.\r\n *\r\n * @public\r\n */\r\nfunction onMessage(messaging, nextOrObserver) {\r\n    messaging = getModularInstance(messaging);\r\n    return onMessage$1(messaging, nextOrObserver);\r\n}\n\n/**\r\n * Firebase Cloud Messaging\r\n *\r\n * @packageDocumentation\r\n */\r\nregisterMessagingInWindow();\n\nexport { deleteToken, getMessagingInWindow as getMessaging, getToken, isWindowSupported as isSupported, onMessage };\n\n", "import { _getProvider, getApp, _registerComponent, registerVersion } from '@firebase/app';\nimport { Logger } from '@firebase/logger';\nimport { ErrorFactory, calculateBackoffMillis, FirebaseError, isIndexedDBAvailable, validateIndexedDBOpenable, isBrowserExtension, areCookiesEnabled, getModularInstance, deepEqual } from '@firebase/util';\nimport { Component } from '@firebase/component';\nimport '@firebase/installations';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Type constant for Firebase Analytics.\r\n */\r\nconst ANALYTICS_TYPE = 'analytics';\r\n// Key to attach FID to in gtag params.\r\nconst GA_FID_KEY = 'firebase_id';\r\nconst ORIGIN_KEY = 'origin';\r\nconst FETCH_TIMEOUT_MILLIS = 60 * 1000;\r\nconst DYNAMIC_CONFIG_URL = 'https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig';\r\nconst GTAG_URL = 'https://www.googletagmanager.com/gtag/js';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst logger = new Logger('@firebase/analytics');\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst ERRORS = {\r\n    [\"already-exists\" /* AnalyticsError.ALREADY_EXISTS */]: 'A Firebase Analytics instance with the appId {$id} ' +\r\n        ' already exists. ' +\r\n        'Only one Firebase Analytics instance can be created for each appId.',\r\n    [\"already-initialized\" /* AnalyticsError.ALREADY_INITIALIZED */]: 'initializeAnalytics() cannot be called again with different options than those ' +\r\n        'it was initially called with. It can be called again with the same options to ' +\r\n        'return the existing instance, or getAnalytics() can be used ' +\r\n        'to get a reference to the already-intialized instance.',\r\n    [\"already-initialized-settings\" /* AnalyticsError.ALREADY_INITIALIZED_SETTINGS */]: 'Firebase Analytics has already been initialized.' +\r\n        'settings() must be called before initializing any Analytics instance' +\r\n        'or it will have no effect.',\r\n    [\"interop-component-reg-failed\" /* AnalyticsError.INTEROP_COMPONENT_REG_FAILED */]: 'Firebase Analytics Interop Component failed to instantiate: {$reason}',\r\n    [\"invalid-analytics-context\" /* AnalyticsError.INVALID_ANALYTICS_CONTEXT */]: 'Firebase Analytics is not supported in this environment. ' +\r\n        'Wrap initialization of analytics in analytics.isSupported() ' +\r\n        'to prevent initialization in unsupported environments. Details: {$errorInfo}',\r\n    [\"indexeddb-unavailable\" /* AnalyticsError.INDEXEDDB_UNAVAILABLE */]: 'IndexedDB unavailable or restricted in this environment. ' +\r\n        'Wrap initialization of analytics in analytics.isSupported() ' +\r\n        'to prevent initialization in unsupported environments. Details: {$errorInfo}',\r\n    [\"fetch-throttle\" /* AnalyticsError.FETCH_THROTTLE */]: 'The config fetch request timed out while in an exponential backoff state.' +\r\n        ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.',\r\n    [\"config-fetch-failed\" /* AnalyticsError.CONFIG_FETCH_FAILED */]: 'Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}',\r\n    [\"no-api-key\" /* AnalyticsError.NO_API_KEY */]: 'The \"apiKey\" field is empty in the local Firebase config. Firebase Analytics requires this field to' +\r\n        'contain a valid API key.',\r\n    [\"no-app-id\" /* AnalyticsError.NO_APP_ID */]: 'The \"appId\" field is empty in the local Firebase config. Firebase Analytics requires this field to' +\r\n        'contain a valid app ID.',\r\n    [\"no-client-id\" /* AnalyticsError.NO_CLIENT_ID */]: 'The \"client_id\" field is empty.',\r\n    [\"invalid-gtag-resource\" /* AnalyticsError.INVALID_GTAG_RESOURCE */]: 'Trusted Types detected an invalid gtag resource: {$gtagURL}.'\r\n};\r\nconst ERROR_FACTORY = new ErrorFactory('analytics', 'Analytics', ERRORS);\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Verifies and creates a TrustedScriptURL.\r\n */\r\nfunction createGtagTrustedTypesScriptURL(url) {\r\n    if (!url.startsWith(GTAG_URL)) {\r\n        const err = ERROR_FACTORY.create(\"invalid-gtag-resource\" /* AnalyticsError.INVALID_GTAG_RESOURCE */, {\r\n            gtagURL: url\r\n        });\r\n        logger.warn(err.message);\r\n        return '';\r\n    }\r\n    return url;\r\n}\r\n/**\r\n * Makeshift polyfill for Promise.allSettled(). Resolves when all promises\r\n * have either resolved or rejected.\r\n *\r\n * @param promises Array of promises to wait for.\r\n */\r\nfunction promiseAllSettled(promises) {\r\n    return Promise.all(promises.map(promise => promise.catch(e => e)));\r\n}\r\n/**\r\n * Creates a TrustedTypePolicy object that implements the rules passed as policyOptions.\r\n *\r\n * @param policyName A string containing the name of the policy\r\n * @param policyOptions Object containing implementations of instance methods for TrustedTypesPolicy, see {@link https://developer.mozilla.org/en-US/docs/Web/API/TrustedTypePolicy#instance_methods\r\n * | the TrustedTypePolicy reference documentation}.\r\n */\r\nfunction createTrustedTypesPolicy(policyName, policyOptions) {\r\n    // Create a TrustedTypes policy that we can use for updating src\r\n    // properties\r\n    let trustedTypesPolicy;\r\n    if (window.trustedTypes) {\r\n        trustedTypesPolicy = window.trustedTypes.createPolicy(policyName, policyOptions);\r\n    }\r\n    return trustedTypesPolicy;\r\n}\r\n/**\r\n * Inserts gtag script tag into the page to asynchronously download gtag.\r\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\r\n */\r\nfunction insertScriptTag(dataLayerName, measurementId) {\r\n    const trustedTypesPolicy = createTrustedTypesPolicy('firebase-js-sdk-policy', {\r\n        createScriptURL: createGtagTrustedTypesScriptURL\r\n    });\r\n    const script = document.createElement('script');\r\n    // We are not providing an analyticsId in the URL because it would trigger a `page_view`\r\n    // without fid. We will initialize ga-id using gtag (config) command together with fid.\r\n    const gtagScriptURL = `${GTAG_URL}?l=${dataLayerName}&id=${measurementId}`;\r\n    script.src = trustedTypesPolicy\r\n        ? trustedTypesPolicy === null || trustedTypesPolicy === void 0 ? void 0 : trustedTypesPolicy.createScriptURL(gtagScriptURL)\r\n        : gtagScriptURL;\r\n    script.async = true;\r\n    document.head.appendChild(script);\r\n}\r\n/**\r\n * Get reference to, or create, global datalayer.\r\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\r\n */\r\nfunction getOrCreateDataLayer(dataLayerName) {\r\n    // Check for existing dataLayer and create if needed.\r\n    let dataLayer = [];\r\n    if (Array.isArray(window[dataLayerName])) {\r\n        dataLayer = window[dataLayerName];\r\n    }\r\n    else {\r\n        window[dataLayerName] = dataLayer;\r\n    }\r\n    return dataLayer;\r\n}\r\n/**\r\n * Wrapped gtag logic when gtag is called with 'config' command.\r\n *\r\n * @param gtagCore Basic gtag function that just appends to dataLayer.\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\r\n * @param measurementId GA Measurement ID to set config for.\r\n * @param gtagParams Gtag config params to set.\r\n */\r\nasync function gtagOnConfig(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, measurementId, gtagParams) {\r\n    // If config is already fetched, we know the appId and can use it to look up what FID promise we\r\n    /// are waiting for, and wait only on that one.\r\n    const correspondingAppId = measurementIdToAppId[measurementId];\r\n    try {\r\n        if (correspondingAppId) {\r\n            await initializationPromisesMap[correspondingAppId];\r\n        }\r\n        else {\r\n            // If config is not fetched yet, wait for all configs (we don't know which one we need) and\r\n            // find the appId (if any) corresponding to this measurementId. If there is one, wait on\r\n            // that appId's initialization promise. If there is none, promise resolves and gtag\r\n            // call goes through.\r\n            const dynamicConfigResults = await promiseAllSettled(dynamicConfigPromisesList);\r\n            const foundConfig = dynamicConfigResults.find(config => config.measurementId === measurementId);\r\n            if (foundConfig) {\r\n                await initializationPromisesMap[foundConfig.appId];\r\n            }\r\n        }\r\n    }\r\n    catch (e) {\r\n        logger.error(e);\r\n    }\r\n    gtagCore(\"config\" /* GtagCommand.CONFIG */, measurementId, gtagParams);\r\n}\r\n/**\r\n * Wrapped gtag logic when gtag is called with 'event' command.\r\n *\r\n * @param gtagCore Basic gtag function that just appends to dataLayer.\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementId GA Measurement ID to log event to.\r\n * @param gtagParams Params to log with this event.\r\n */\r\nasync function gtagOnEvent(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementId, gtagParams) {\r\n    try {\r\n        let initializationPromisesToWaitFor = [];\r\n        // If there's a 'send_to' param, check if any ID specified matches\r\n        // an initializeIds() promise we are waiting for.\r\n        if (gtagParams && gtagParams['send_to']) {\r\n            let gaSendToList = gtagParams['send_to'];\r\n            // Make it an array if is isn't, so it can be dealt with the same way.\r\n            if (!Array.isArray(gaSendToList)) {\r\n                gaSendToList = [gaSendToList];\r\n            }\r\n            // Checking 'send_to' fields requires having all measurement ID results back from\r\n            // the dynamic config fetch.\r\n            const dynamicConfigResults = await promiseAllSettled(dynamicConfigPromisesList);\r\n            for (const sendToId of gaSendToList) {\r\n                // Any fetched dynamic measurement ID that matches this 'send_to' ID\r\n                const foundConfig = dynamicConfigResults.find(config => config.measurementId === sendToId);\r\n                const initializationPromise = foundConfig && initializationPromisesMap[foundConfig.appId];\r\n                if (initializationPromise) {\r\n                    initializationPromisesToWaitFor.push(initializationPromise);\r\n                }\r\n                else {\r\n                    // Found an item in 'send_to' that is not associated\r\n                    // directly with an FID, possibly a group.  Empty this array,\r\n                    // exit the loop early, and let it get populated below.\r\n                    initializationPromisesToWaitFor = [];\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        // This will be unpopulated if there was no 'send_to' field , or\r\n        // if not all entries in the 'send_to' field could be mapped to\r\n        // a FID. In these cases, wait on all pending initialization promises.\r\n        if (initializationPromisesToWaitFor.length === 0) {\r\n            initializationPromisesToWaitFor = Object.values(initializationPromisesMap);\r\n        }\r\n        // Run core gtag function with args after all relevant initialization\r\n        // promises have been resolved.\r\n        await Promise.all(initializationPromisesToWaitFor);\r\n        // Workaround for http://b/141370449 - third argument cannot be undefined.\r\n        gtagCore(\"event\" /* GtagCommand.EVENT */, measurementId, gtagParams || {});\r\n    }\r\n    catch (e) {\r\n        logger.error(e);\r\n    }\r\n}\r\n/**\r\n * Wraps a standard gtag function with extra code to wait for completion of\r\n * relevant initialization promises before sending requests.\r\n *\r\n * @param gtagCore Basic gtag function that just appends to dataLayer.\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\r\n */\r\nfunction wrapGtag(gtagCore, \r\n/**\r\n * Allows wrapped gtag calls to wait on whichever intialization promises are required,\r\n * depending on the contents of the gtag params' `send_to` field, if any.\r\n */\r\ninitializationPromisesMap, \r\n/**\r\n * Wrapped gtag calls sometimes require all dynamic config fetches to have returned\r\n * before determining what initialization promises (which include FIDs) to wait for.\r\n */\r\ndynamicConfigPromisesList, \r\n/**\r\n * Wrapped gtag config calls can narrow down which initialization promise (with FID)\r\n * to wait for if the measurementId is already fetched, by getting the corresponding appId,\r\n * which is the key for the initialization promises map.\r\n */\r\nmeasurementIdToAppId) {\r\n    /**\r\n     * Wrapper around gtag that ensures FID is sent with gtag calls.\r\n     * @param command Gtag command type.\r\n     * @param idOrNameOrParams Measurement ID if command is EVENT/CONFIG, params if command is SET.\r\n     * @param gtagParams Params if event is EVENT/CONFIG.\r\n     */\r\n    async function gtagWrapper(command, ...args) {\r\n        try {\r\n            // If event, check that relevant initialization promises have completed.\r\n            if (command === \"event\" /* GtagCommand.EVENT */) {\r\n                const [measurementId, gtagParams] = args;\r\n                // If EVENT, second arg must be measurementId.\r\n                await gtagOnEvent(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementId, gtagParams);\r\n            }\r\n            else if (command === \"config\" /* GtagCommand.CONFIG */) {\r\n                const [measurementId, gtagParams] = args;\r\n                // If CONFIG, second arg must be measurementId.\r\n                await gtagOnConfig(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, measurementId, gtagParams);\r\n            }\r\n            else if (command === \"consent\" /* GtagCommand.CONSENT */) {\r\n                const [gtagParams] = args;\r\n                gtagCore(\"consent\" /* GtagCommand.CONSENT */, 'update', gtagParams);\r\n            }\r\n            else if (command === \"get\" /* GtagCommand.GET */) {\r\n                const [measurementId, fieldName, callback] = args;\r\n                gtagCore(\"get\" /* GtagCommand.GET */, measurementId, fieldName, callback);\r\n            }\r\n            else if (command === \"set\" /* GtagCommand.SET */) {\r\n                const [customParams] = args;\r\n                // If SET, second arg must be params.\r\n                gtagCore(\"set\" /* GtagCommand.SET */, customParams);\r\n            }\r\n            else {\r\n                gtagCore(command, ...args);\r\n            }\r\n        }\r\n        catch (e) {\r\n            logger.error(e);\r\n        }\r\n    }\r\n    return gtagWrapper;\r\n}\r\n/**\r\n * Creates global gtag function or wraps existing one if found.\r\n * This wrapped function attaches Firebase instance ID (FID) to gtag 'config' and\r\n * 'event' calls that belong to the GAID associated with this Firebase instance.\r\n *\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\r\n * @param dataLayerName Name of global GA datalayer array.\r\n * @param gtagFunctionName Name of global gtag function (\"gtag\" if not user-specified).\r\n */\r\nfunction wrapOrCreateGtag(initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, dataLayerName, gtagFunctionName) {\r\n    // Create a basic core gtag function\r\n    let gtagCore = function (..._args) {\r\n        // Must push IArguments object, not an array.\r\n        window[dataLayerName].push(arguments);\r\n    };\r\n    // Replace it with existing one if found\r\n    if (window[gtagFunctionName] &&\r\n        typeof window[gtagFunctionName] === 'function') {\r\n        // @ts-ignore\r\n        gtagCore = window[gtagFunctionName];\r\n    }\r\n    window[gtagFunctionName] = wrapGtag(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId);\r\n    return {\r\n        gtagCore,\r\n        wrappedGtag: window[gtagFunctionName]\r\n    };\r\n}\r\n/**\r\n * Returns the script tag in the DOM matching both the gtag url pattern\r\n * and the provided data layer name.\r\n */\r\nfunction findGtagScriptOnPage(dataLayerName) {\r\n    const scriptTags = window.document.getElementsByTagName('script');\r\n    for (const tag of Object.values(scriptTags)) {\r\n        if (tag.src &&\r\n            tag.src.includes(GTAG_URL) &&\r\n            tag.src.includes(dataLayerName)) {\r\n            return tag;\r\n        }\r\n    }\r\n    return null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Backoff factor for 503 errors, which we want to be conservative about\r\n * to avoid overloading servers. Each retry interval will be\r\n * BASE_INTERVAL_MILLIS * LONG_RETRY_FACTOR ^ retryCount, so the second one\r\n * will be ~30 seconds (with fuzzing).\r\n */\r\nconst LONG_RETRY_FACTOR = 30;\r\n/**\r\n * Base wait interval to multiplied by backoffFactor^backoffCount.\r\n */\r\nconst BASE_INTERVAL_MILLIS = 1000;\r\n/**\r\n * Stubbable retry data storage class.\r\n */\r\nclass RetryData {\r\n    constructor(throttleMetadata = {}, intervalMillis = BASE_INTERVAL_MILLIS) {\r\n        this.throttleMetadata = throttleMetadata;\r\n        this.intervalMillis = intervalMillis;\r\n    }\r\n    getThrottleMetadata(appId) {\r\n        return this.throttleMetadata[appId];\r\n    }\r\n    setThrottleMetadata(appId, metadata) {\r\n        this.throttleMetadata[appId] = metadata;\r\n    }\r\n    deleteThrottleMetadata(appId) {\r\n        delete this.throttleMetadata[appId];\r\n    }\r\n}\r\nconst defaultRetryData = new RetryData();\r\n/**\r\n * Set GET request headers.\r\n * @param apiKey App API key.\r\n */\r\nfunction getHeaders(apiKey) {\r\n    return new Headers({\r\n        Accept: 'application/json',\r\n        'x-goog-api-key': apiKey\r\n    });\r\n}\r\n/**\r\n * Fetches dynamic config from backend.\r\n * @param app Firebase app to fetch config for.\r\n */\r\nasync function fetchDynamicConfig(appFields) {\r\n    var _a;\r\n    const { appId, apiKey } = appFields;\r\n    const request = {\r\n        method: 'GET',\r\n        headers: getHeaders(apiKey)\r\n    };\r\n    const appUrl = DYNAMIC_CONFIG_URL.replace('{app-id}', appId);\r\n    const response = await fetch(appUrl, request);\r\n    if (response.status !== 200 && response.status !== 304) {\r\n        let errorMessage = '';\r\n        try {\r\n            // Try to get any error message text from server response.\r\n            const jsonResponse = (await response.json());\r\n            if ((_a = jsonResponse.error) === null || _a === void 0 ? void 0 : _a.message) {\r\n                errorMessage = jsonResponse.error.message;\r\n            }\r\n        }\r\n        catch (_ignored) { }\r\n        throw ERROR_FACTORY.create(\"config-fetch-failed\" /* AnalyticsError.CONFIG_FETCH_FAILED */, {\r\n            httpStatus: response.status,\r\n            responseMessage: errorMessage\r\n        });\r\n    }\r\n    return response.json();\r\n}\r\n/**\r\n * Fetches dynamic config from backend, retrying if failed.\r\n * @param app Firebase app to fetch config for.\r\n */\r\nasync function fetchDynamicConfigWithRetry(app, \r\n// retryData and timeoutMillis are parameterized to allow passing a different value for testing.\r\nretryData = defaultRetryData, timeoutMillis) {\r\n    const { appId, apiKey, measurementId } = app.options;\r\n    if (!appId) {\r\n        throw ERROR_FACTORY.create(\"no-app-id\" /* AnalyticsError.NO_APP_ID */);\r\n    }\r\n    if (!apiKey) {\r\n        if (measurementId) {\r\n            return {\r\n                measurementId,\r\n                appId\r\n            };\r\n        }\r\n        throw ERROR_FACTORY.create(\"no-api-key\" /* AnalyticsError.NO_API_KEY */);\r\n    }\r\n    const throttleMetadata = retryData.getThrottleMetadata(appId) || {\r\n        backoffCount: 0,\r\n        throttleEndTimeMillis: Date.now()\r\n    };\r\n    const signal = new AnalyticsAbortSignal();\r\n    setTimeout(async () => {\r\n        // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.\r\n        signal.abort();\r\n    }, timeoutMillis !== undefined ? timeoutMillis : FETCH_TIMEOUT_MILLIS);\r\n    return attemptFetchDynamicConfigWithRetry({ appId, apiKey, measurementId }, throttleMetadata, signal, retryData);\r\n}\r\n/**\r\n * Runs one retry attempt.\r\n * @param appFields Necessary app config fields.\r\n * @param throttleMetadata Ongoing metadata to determine throttling times.\r\n * @param signal Abort signal.\r\n */\r\nasync function attemptFetchDynamicConfigWithRetry(appFields, { throttleEndTimeMillis, backoffCount }, signal, retryData = defaultRetryData // for testing\r\n) {\r\n    var _a;\r\n    const { appId, measurementId } = appFields;\r\n    // Starts with a (potentially zero) timeout to support resumption from stored state.\r\n    // Ensures the throttle end time is honored if the last attempt timed out.\r\n    // Note the SDK will never make a request if the fetch timeout expires at this point.\r\n    try {\r\n        await setAbortableTimeout(signal, throttleEndTimeMillis);\r\n    }\r\n    catch (e) {\r\n        if (measurementId) {\r\n            logger.warn(`Timed out fetching this Firebase app's measurement ID from the server.` +\r\n                ` Falling back to the measurement ID ${measurementId}` +\r\n                ` provided in the \"measurementId\" field in the local Firebase config. [${e === null || e === void 0 ? void 0 : e.message}]`);\r\n            return { appId, measurementId };\r\n        }\r\n        throw e;\r\n    }\r\n    try {\r\n        const response = await fetchDynamicConfig(appFields);\r\n        // Note the SDK only clears throttle state if response is success or non-retriable.\r\n        retryData.deleteThrottleMetadata(appId);\r\n        return response;\r\n    }\r\n    catch (e) {\r\n        const error = e;\r\n        if (!isRetriableError(error)) {\r\n            retryData.deleteThrottleMetadata(appId);\r\n            if (measurementId) {\r\n                logger.warn(`Failed to fetch this Firebase app's measurement ID from the server.` +\r\n                    ` Falling back to the measurement ID ${measurementId}` +\r\n                    ` provided in the \"measurementId\" field in the local Firebase config. [${error === null || error === void 0 ? void 0 : error.message}]`);\r\n                return { appId, measurementId };\r\n            }\r\n            else {\r\n                throw e;\r\n            }\r\n        }\r\n        const backoffMillis = Number((_a = error === null || error === void 0 ? void 0 : error.customData) === null || _a === void 0 ? void 0 : _a.httpStatus) === 503\r\n            ? calculateBackoffMillis(backoffCount, retryData.intervalMillis, LONG_RETRY_FACTOR)\r\n            : calculateBackoffMillis(backoffCount, retryData.intervalMillis);\r\n        // Increments backoff state.\r\n        const throttleMetadata = {\r\n            throttleEndTimeMillis: Date.now() + backoffMillis,\r\n            backoffCount: backoffCount + 1\r\n        };\r\n        // Persists state.\r\n        retryData.setThrottleMetadata(appId, throttleMetadata);\r\n        logger.debug(`Calling attemptFetch again in ${backoffMillis} millis`);\r\n        return attemptFetchDynamicConfigWithRetry(appFields, throttleMetadata, signal, retryData);\r\n    }\r\n}\r\n/**\r\n * Supports waiting on a backoff by:\r\n *\r\n * <ul>\r\n *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>\r\n *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>\r\n *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled\r\n *       request appear the same.</li>\r\n * </ul>\r\n *\r\n * <p>Visible for testing.\r\n */\r\nfunction setAbortableTimeout(signal, throttleEndTimeMillis) {\r\n    return new Promise((resolve, reject) => {\r\n        // Derives backoff from given end time, normalizing negative numbers to zero.\r\n        const backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);\r\n        const timeout = setTimeout(resolve, backoffMillis);\r\n        // Adds listener, rather than sets onabort, because signal is a shared object.\r\n        signal.addEventListener(() => {\r\n            clearTimeout(timeout);\r\n            // If the request completes before this timeout, the rejection has no effect.\r\n            reject(ERROR_FACTORY.create(\"fetch-throttle\" /* AnalyticsError.FETCH_THROTTLE */, {\r\n                throttleEndTimeMillis\r\n            }));\r\n        });\r\n    });\r\n}\r\n/**\r\n * Returns true if the {@link Error} indicates a fetch request may succeed later.\r\n */\r\nfunction isRetriableError(e) {\r\n    if (!(e instanceof FirebaseError) || !e.customData) {\r\n        return false;\r\n    }\r\n    // Uses string index defined by ErrorData, which FirebaseError implements.\r\n    const httpStatus = Number(e.customData['httpStatus']);\r\n    return (httpStatus === 429 ||\r\n        httpStatus === 500 ||\r\n        httpStatus === 503 ||\r\n        httpStatus === 504);\r\n}\r\n/**\r\n * Shims a minimal AbortSignal (copied from Remote Config).\r\n *\r\n * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects\r\n * of networking, such as retries. Firebase doesn't use AbortController enough to justify a\r\n * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be\r\n * swapped out if/when we do.\r\n */\r\nclass AnalyticsAbortSignal {\r\n    constructor() {\r\n        this.listeners = [];\r\n    }\r\n    addEventListener(listener) {\r\n        this.listeners.push(listener);\r\n    }\r\n    abort() {\r\n        this.listeners.forEach(listener => listener());\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Event parameters to set on 'gtag' during initialization.\r\n */\r\nlet defaultEventParametersForInit;\r\n/**\r\n * Logs an analytics event through the Firebase SDK.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param eventName Google Analytics event name, choose from standard list or use a custom string.\r\n * @param eventParams Analytics event parameters.\r\n */\r\nasync function logEvent$1(gtagFunction, initializationPromise, eventName, eventParams, options) {\r\n    if (options && options.global) {\r\n        gtagFunction(\"event\" /* GtagCommand.EVENT */, eventName, eventParams);\r\n        return;\r\n    }\r\n    else {\r\n        const measurementId = await initializationPromise;\r\n        const params = Object.assign(Object.assign({}, eventParams), { 'send_to': measurementId });\r\n        gtagFunction(\"event\" /* GtagCommand.EVENT */, eventName, params);\r\n    }\r\n}\r\n/**\r\n * Set screen_name parameter for this Google Analytics ID.\r\n *\r\n * @deprecated Use {@link logEvent} with `eventName` as 'screen_view' and add relevant `eventParams`.\r\n * See {@link https://firebase.google.com/docs/analytics/screenviews | Track Screenviews}.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param screenName Screen name string to set.\r\n */\r\nasync function setCurrentScreen$1(gtagFunction, initializationPromise, screenName, options) {\r\n    if (options && options.global) {\r\n        gtagFunction(\"set\" /* GtagCommand.SET */, { 'screen_name': screenName });\r\n        return Promise.resolve();\r\n    }\r\n    else {\r\n        const measurementId = await initializationPromise;\r\n        gtagFunction(\"config\" /* GtagCommand.CONFIG */, measurementId, {\r\n            update: true,\r\n            'screen_name': screenName\r\n        });\r\n    }\r\n}\r\n/**\r\n * Set user_id parameter for this Google Analytics ID.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param id User ID string to set\r\n */\r\nasync function setUserId$1(gtagFunction, initializationPromise, id, options) {\r\n    if (options && options.global) {\r\n        gtagFunction(\"set\" /* GtagCommand.SET */, { 'user_id': id });\r\n        return Promise.resolve();\r\n    }\r\n    else {\r\n        const measurementId = await initializationPromise;\r\n        gtagFunction(\"config\" /* GtagCommand.CONFIG */, measurementId, {\r\n            update: true,\r\n            'user_id': id\r\n        });\r\n    }\r\n}\r\n/**\r\n * Set all other user properties other than user_id and screen_name.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param properties Map of user properties to set\r\n */\r\nasync function setUserProperties$1(gtagFunction, initializationPromise, properties, options) {\r\n    if (options && options.global) {\r\n        const flatProperties = {};\r\n        for (const key of Object.keys(properties)) {\r\n            // use dot notation for merge behavior in gtag.js\r\n            flatProperties[`user_properties.${key}`] = properties[key];\r\n        }\r\n        gtagFunction(\"set\" /* GtagCommand.SET */, flatProperties);\r\n        return Promise.resolve();\r\n    }\r\n    else {\r\n        const measurementId = await initializationPromise;\r\n        gtagFunction(\"config\" /* GtagCommand.CONFIG */, measurementId, {\r\n            update: true,\r\n            'user_properties': properties\r\n        });\r\n    }\r\n}\r\n/**\r\n * Retrieves a unique Google Analytics identifier for the web client.\r\n * See {@link https://developers.google.com/analytics/devguides/collection/ga4/reference/config#client_id | client_id}.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n */\r\nasync function internalGetGoogleAnalyticsClientId(gtagFunction, initializationPromise) {\r\n    const measurementId = await initializationPromise;\r\n    return new Promise((resolve, reject) => {\r\n        gtagFunction(\"get\" /* GtagCommand.GET */, measurementId, 'client_id', (clientId) => {\r\n            if (!clientId) {\r\n                reject(ERROR_FACTORY.create(\"no-client-id\" /* AnalyticsError.NO_CLIENT_ID */));\r\n            }\r\n            resolve(clientId);\r\n        });\r\n    });\r\n}\r\n/**\r\n * Set whether collection is enabled for this ID.\r\n *\r\n * @param enabled If true, collection is enabled for this ID.\r\n */\r\nasync function setAnalyticsCollectionEnabled$1(initializationPromise, enabled) {\r\n    const measurementId = await initializationPromise;\r\n    window[`ga-disable-${measurementId}`] = !enabled;\r\n}\r\n/**\r\n * Consent parameters to default to during 'gtag' initialization.\r\n */\r\nlet defaultConsentSettingsForInit;\r\n/**\r\n * Sets the variable {@link defaultConsentSettingsForInit} for use in the initialization of\r\n * analytics.\r\n *\r\n * @param consentSettings Maps the applicable end user consent state for gtag.js.\r\n */\r\nfunction _setConsentDefaultForInit(consentSettings) {\r\n    defaultConsentSettingsForInit = consentSettings;\r\n}\r\n/**\r\n * Sets the variable `defaultEventParametersForInit` for use in the initialization of\r\n * analytics.\r\n *\r\n * @param customParams Any custom params the user may pass to gtag.js.\r\n */\r\nfunction _setDefaultEventParametersForInit(customParams) {\r\n    defaultEventParametersForInit = customParams;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function validateIndexedDB() {\r\n    if (!isIndexedDBAvailable()) {\r\n        logger.warn(ERROR_FACTORY.create(\"indexeddb-unavailable\" /* AnalyticsError.INDEXEDDB_UNAVAILABLE */, {\r\n            errorInfo: 'IndexedDB is not available in this environment.'\r\n        }).message);\r\n        return false;\r\n    }\r\n    else {\r\n        try {\r\n            await validateIndexedDBOpenable();\r\n        }\r\n        catch (e) {\r\n            logger.warn(ERROR_FACTORY.create(\"indexeddb-unavailable\" /* AnalyticsError.INDEXEDDB_UNAVAILABLE */, {\r\n                errorInfo: e === null || e === void 0 ? void 0 : e.toString()\r\n            }).message);\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Initialize the analytics instance in gtag.js by calling config command with fid.\r\n *\r\n * NOTE: We combine analytics initialization and setting fid together because we want fid to be\r\n * part of the `page_view` event that's sent during the initialization\r\n * @param app Firebase app\r\n * @param gtagCore The gtag function that's not wrapped.\r\n * @param dynamicConfigPromisesList Array of all dynamic config promises.\r\n * @param measurementIdToAppId Maps measurementID to appID.\r\n * @param installations _FirebaseInstallationsInternal instance.\r\n *\r\n * @returns Measurement ID.\r\n */\r\nasync function _initializeAnalytics(app, dynamicConfigPromisesList, measurementIdToAppId, installations, gtagCore, dataLayerName, options) {\r\n    var _a;\r\n    const dynamicConfigPromise = fetchDynamicConfigWithRetry(app);\r\n    // Once fetched, map measurementIds to appId, for ease of lookup in wrapped gtag function.\r\n    dynamicConfigPromise\r\n        .then(config => {\r\n        measurementIdToAppId[config.measurementId] = config.appId;\r\n        if (app.options.measurementId &&\r\n            config.measurementId !== app.options.measurementId) {\r\n            logger.warn(`The measurement ID in the local Firebase config (${app.options.measurementId})` +\r\n                ` does not match the measurement ID fetched from the server (${config.measurementId}).` +\r\n                ` To ensure analytics events are always sent to the correct Analytics property,` +\r\n                ` update the` +\r\n                ` measurement ID field in the local config or remove it from the local config.`);\r\n        }\r\n    })\r\n        .catch(e => logger.error(e));\r\n    // Add to list to track state of all dynamic config promises.\r\n    dynamicConfigPromisesList.push(dynamicConfigPromise);\r\n    const fidPromise = validateIndexedDB().then(envIsValid => {\r\n        if (envIsValid) {\r\n            return installations.getId();\r\n        }\r\n        else {\r\n            return undefined;\r\n        }\r\n    });\r\n    const [dynamicConfig, fid] = await Promise.all([\r\n        dynamicConfigPromise,\r\n        fidPromise\r\n    ]);\r\n    // Detect if user has already put the gtag <script> tag on this page with the passed in\r\n    // data layer name.\r\n    if (!findGtagScriptOnPage(dataLayerName)) {\r\n        insertScriptTag(dataLayerName, dynamicConfig.measurementId);\r\n    }\r\n    // Detects if there are consent settings that need to be configured.\r\n    if (defaultConsentSettingsForInit) {\r\n        gtagCore(\"consent\" /* GtagCommand.CONSENT */, 'default', defaultConsentSettingsForInit);\r\n        _setConsentDefaultForInit(undefined);\r\n    }\r\n    // This command initializes gtag.js and only needs to be called once for the entire web app,\r\n    // but since it is idempotent, we can call it multiple times.\r\n    // We keep it together with other initialization logic for better code structure.\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    gtagCore('js', new Date());\r\n    // User config added first. We don't want users to accidentally overwrite\r\n    // base Firebase config properties.\r\n    const configProperties = (_a = options === null || options === void 0 ? void 0 : options.config) !== null && _a !== void 0 ? _a : {};\r\n    // guard against developers accidentally setting properties with prefix `firebase_`\r\n    configProperties[ORIGIN_KEY] = 'firebase';\r\n    configProperties.update = true;\r\n    if (fid != null) {\r\n        configProperties[GA_FID_KEY] = fid;\r\n    }\r\n    // It should be the first config command called on this GA-ID\r\n    // Initialize this GA-ID and set FID on it using the gtag config API.\r\n    // Note: This will trigger a page_view event unless 'send_page_view' is set to false in\r\n    // `configProperties`.\r\n    gtagCore(\"config\" /* GtagCommand.CONFIG */, dynamicConfig.measurementId, configProperties);\r\n    // Detects if there is data that will be set on every event logged from the SDK.\r\n    if (defaultEventParametersForInit) {\r\n        gtagCore(\"set\" /* GtagCommand.SET */, defaultEventParametersForInit);\r\n        _setDefaultEventParametersForInit(undefined);\r\n    }\r\n    return dynamicConfig.measurementId;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Analytics Service class.\r\n */\r\nclass AnalyticsService {\r\n    constructor(app) {\r\n        this.app = app;\r\n    }\r\n    _delete() {\r\n        delete initializationPromisesMap[this.app.options.appId];\r\n        return Promise.resolve();\r\n    }\r\n}\r\n/**\r\n * Maps appId to full initialization promise. Wrapped gtag calls must wait on\r\n * all or some of these, depending on the call's `send_to` param and the status\r\n * of the dynamic config fetches (see below).\r\n */\r\nlet initializationPromisesMap = {};\r\n/**\r\n * List of dynamic config fetch promises. In certain cases, wrapped gtag calls\r\n * wait on all these to be complete in order to determine if it can selectively\r\n * wait for only certain initialization (FID) promises or if it must wait for all.\r\n */\r\nlet dynamicConfigPromisesList = [];\r\n/**\r\n * Maps fetched measurementIds to appId. Populated when the app's dynamic config\r\n * fetch completes. If already populated, gtag config calls can use this to\r\n * selectively wait for only this app's initialization promise (FID) instead of all\r\n * initialization promises.\r\n */\r\nconst measurementIdToAppId = {};\r\n/**\r\n * Name for window global data layer array used by GA: defaults to 'dataLayer'.\r\n */\r\nlet dataLayerName = 'dataLayer';\r\n/**\r\n * Name for window global gtag function used by GA: defaults to 'gtag'.\r\n */\r\nlet gtagName = 'gtag';\r\n/**\r\n * Reproduction of standard gtag function or reference to existing\r\n * gtag function on window object.\r\n */\r\nlet gtagCoreFunction;\r\n/**\r\n * Wrapper around gtag function that ensures FID is sent with all\r\n * relevant event and config calls.\r\n */\r\nlet wrappedGtagFunction;\r\n/**\r\n * Flag to ensure page initialization steps (creation or wrapping of\r\n * dataLayer and gtag script) are only run once per page load.\r\n */\r\nlet globalInitDone = false;\r\n/**\r\n * Configures Firebase Analytics to use custom `gtag` or `dataLayer` names.\r\n * Intended to be used if `gtag.js` script has been installed on\r\n * this page independently of Firebase Analytics, and is using non-default\r\n * names for either the `gtag` function or for `dataLayer`.\r\n * Must be called before calling `getAnalytics()` or it won't\r\n * have any effect.\r\n *\r\n * @public\r\n *\r\n * @param options - Custom gtag and dataLayer names.\r\n */\r\nfunction settings(options) {\r\n    if (globalInitDone) {\r\n        throw ERROR_FACTORY.create(\"already-initialized\" /* AnalyticsError.ALREADY_INITIALIZED */);\r\n    }\r\n    if (options.dataLayerName) {\r\n        dataLayerName = options.dataLayerName;\r\n    }\r\n    if (options.gtagName) {\r\n        gtagName = options.gtagName;\r\n    }\r\n}\r\n/**\r\n * Returns true if no environment mismatch is found.\r\n * If environment mismatches are found, throws an INVALID_ANALYTICS_CONTEXT\r\n * error that also lists details for each mismatch found.\r\n */\r\nfunction warnOnBrowserContextMismatch() {\r\n    const mismatchedEnvMessages = [];\r\n    if (isBrowserExtension()) {\r\n        mismatchedEnvMessages.push('This is a browser extension environment.');\r\n    }\r\n    if (!areCookiesEnabled()) {\r\n        mismatchedEnvMessages.push('Cookies are not available.');\r\n    }\r\n    if (mismatchedEnvMessages.length > 0) {\r\n        const details = mismatchedEnvMessages\r\n            .map((message, index) => `(${index + 1}) ${message}`)\r\n            .join(' ');\r\n        const err = ERROR_FACTORY.create(\"invalid-analytics-context\" /* AnalyticsError.INVALID_ANALYTICS_CONTEXT */, {\r\n            errorInfo: details\r\n        });\r\n        logger.warn(err.message);\r\n    }\r\n}\r\n/**\r\n * Analytics instance factory.\r\n * @internal\r\n */\r\nfunction factory(app, installations, options) {\r\n    warnOnBrowserContextMismatch();\r\n    const appId = app.options.appId;\r\n    if (!appId) {\r\n        throw ERROR_FACTORY.create(\"no-app-id\" /* AnalyticsError.NO_APP_ID */);\r\n    }\r\n    if (!app.options.apiKey) {\r\n        if (app.options.measurementId) {\r\n            logger.warn(`The \"apiKey\" field is empty in the local Firebase config. This is needed to fetch the latest` +\r\n                ` measurement ID for this Firebase app. Falling back to the measurement ID ${app.options.measurementId}` +\r\n                ` provided in the \"measurementId\" field in the local Firebase config.`);\r\n        }\r\n        else {\r\n            throw ERROR_FACTORY.create(\"no-api-key\" /* AnalyticsError.NO_API_KEY */);\r\n        }\r\n    }\r\n    if (initializationPromisesMap[appId] != null) {\r\n        throw ERROR_FACTORY.create(\"already-exists\" /* AnalyticsError.ALREADY_EXISTS */, {\r\n            id: appId\r\n        });\r\n    }\r\n    if (!globalInitDone) {\r\n        // Steps here should only be done once per page: creation or wrapping\r\n        // of dataLayer and global gtag function.\r\n        getOrCreateDataLayer(dataLayerName);\r\n        const { wrappedGtag, gtagCore } = wrapOrCreateGtag(initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, dataLayerName, gtagName);\r\n        wrappedGtagFunction = wrappedGtag;\r\n        gtagCoreFunction = gtagCore;\r\n        globalInitDone = true;\r\n    }\r\n    // Async but non-blocking.\r\n    // This map reflects the completion state of all promises for each appId.\r\n    initializationPromisesMap[appId] = _initializeAnalytics(app, dynamicConfigPromisesList, measurementIdToAppId, installations, gtagCoreFunction, dataLayerName, options);\r\n    const analyticsInstance = new AnalyticsService(app);\r\n    return analyticsInstance;\r\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\n/**\r\n * Returns an {@link Analytics} instance for the given app.\r\n *\r\n * @public\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\r\n */\r\nfunction getAnalytics(app = getApp()) {\r\n    app = getModularInstance(app);\r\n    // Dependencies\r\n    const analyticsProvider = _getProvider(app, ANALYTICS_TYPE);\r\n    if (analyticsProvider.isInitialized()) {\r\n        return analyticsProvider.getImmediate();\r\n    }\r\n    return initializeAnalytics(app);\r\n}\r\n/**\r\n * Returns an {@link Analytics} instance for the given app.\r\n *\r\n * @public\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\r\n */\r\nfunction initializeAnalytics(app, options = {}) {\r\n    // Dependencies\r\n    const analyticsProvider = _getProvider(app, ANALYTICS_TYPE);\r\n    if (analyticsProvider.isInitialized()) {\r\n        const existingInstance = analyticsProvider.getImmediate();\r\n        if (deepEqual(options, analyticsProvider.getOptions())) {\r\n            return existingInstance;\r\n        }\r\n        else {\r\n            throw ERROR_FACTORY.create(\"already-initialized\" /* AnalyticsError.ALREADY_INITIALIZED */);\r\n        }\r\n    }\r\n    const analyticsInstance = analyticsProvider.initialize({ options });\r\n    return analyticsInstance;\r\n}\r\n/**\r\n * This is a public static method provided to users that wraps four different checks:\r\n *\r\n * 1. Check if it's not a browser extension environment.\r\n * 2. Check if cookies are enabled in current browser.\r\n * 3. Check if IndexedDB is supported by the browser environment.\r\n * 4. Check if the current browser context is valid for using `IndexedDB.open()`.\r\n *\r\n * @public\r\n *\r\n */\r\nasync function isSupported() {\r\n    if (isBrowserExtension()) {\r\n        return false;\r\n    }\r\n    if (!areCookiesEnabled()) {\r\n        return false;\r\n    }\r\n    if (!isIndexedDBAvailable()) {\r\n        return false;\r\n    }\r\n    try {\r\n        const isDBOpenable = await validateIndexedDBOpenable();\r\n        return isDBOpenable;\r\n    }\r\n    catch (error) {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Use gtag `config` command to set `screen_name`.\r\n *\r\n * @public\r\n *\r\n * @deprecated Use {@link logEvent} with `eventName` as 'screen_view' and add relevant `eventParams`.\r\n * See {@link https://firebase.google.com/docs/analytics/screenviews | Track Screenviews}.\r\n *\r\n * @param analyticsInstance - The {@link Analytics} instance.\r\n * @param screenName - Screen name to set.\r\n */\r\nfunction setCurrentScreen(analyticsInstance, screenName, options) {\r\n    analyticsInstance = getModularInstance(analyticsInstance);\r\n    setCurrentScreen$1(wrappedGtagFunction, initializationPromisesMap[analyticsInstance.app.options.appId], screenName, options).catch(e => logger.error(e));\r\n}\r\n/**\r\n * Retrieves a unique Google Analytics identifier for the web client.\r\n * See {@link https://developers.google.com/analytics/devguides/collection/ga4/reference/config#client_id | client_id}.\r\n *\r\n * @public\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\r\n */\r\nasync function getGoogleAnalyticsClientId(analyticsInstance) {\r\n    analyticsInstance = getModularInstance(analyticsInstance);\r\n    return internalGetGoogleAnalyticsClientId(wrappedGtagFunction, initializationPromisesMap[analyticsInstance.app.options.appId]);\r\n}\r\n/**\r\n * Use gtag `config` command to set `user_id`.\r\n *\r\n * @public\r\n *\r\n * @param analyticsInstance - The {@link Analytics} instance.\r\n * @param id - User ID to set.\r\n */\r\nfunction setUserId(analyticsInstance, id, options) {\r\n    analyticsInstance = getModularInstance(analyticsInstance);\r\n    setUserId$1(wrappedGtagFunction, initializationPromisesMap[analyticsInstance.app.options.appId], id, options).catch(e => logger.error(e));\r\n}\r\n/**\r\n * Use gtag `config` command to set all params specified.\r\n *\r\n * @public\r\n */\r\nfunction setUserProperties(analyticsInstance, properties, options) {\r\n    analyticsInstance = getModularInstance(analyticsInstance);\r\n    setUserProperties$1(wrappedGtagFunction, initializationPromisesMap[analyticsInstance.app.options.appId], properties, options).catch(e => logger.error(e));\r\n}\r\n/**\r\n * Sets whether Google Analytics collection is enabled for this app on this device.\r\n * Sets global `window['ga-disable-analyticsId'] = true;`\r\n *\r\n * @public\r\n *\r\n * @param analyticsInstance - The {@link Analytics} instance.\r\n * @param enabled - If true, enables collection, if false, disables it.\r\n */\r\nfunction setAnalyticsCollectionEnabled(analyticsInstance, enabled) {\r\n    analyticsInstance = getModularInstance(analyticsInstance);\r\n    setAnalyticsCollectionEnabled$1(initializationPromisesMap[analyticsInstance.app.options.appId], enabled).catch(e => logger.error(e));\r\n}\r\n/**\r\n * Adds data that will be set on every event logged from the SDK, including automatic ones.\r\n * With gtag's \"set\" command, the values passed persist on the current page and are passed with\r\n * all subsequent events.\r\n * @public\r\n * @param customParams - Any custom params the user may pass to gtag.js.\r\n */\r\nfunction setDefaultEventParameters(customParams) {\r\n    // Check if reference to existing gtag function on window object exists\r\n    if (wrappedGtagFunction) {\r\n        wrappedGtagFunction(\"set\" /* GtagCommand.SET */, customParams);\r\n    }\r\n    else {\r\n        _setDefaultEventParametersForInit(customParams);\r\n    }\r\n}\r\n/**\r\n * Sends a Google Analytics event with given `eventParams`. This method\r\n * automatically associates this logged event with this Firebase web\r\n * app instance on this device.\r\n * List of official event parameters can be found in the gtag.js\r\n * reference documentation:\r\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\r\n * | the GA4 reference documentation}.\r\n *\r\n * @public\r\n */\r\nfunction logEvent(analyticsInstance, eventName, eventParams, options) {\r\n    analyticsInstance = getModularInstance(analyticsInstance);\r\n    logEvent$1(wrappedGtagFunction, initializationPromisesMap[analyticsInstance.app.options.appId], eventName, eventParams, options).catch(e => logger.error(e));\r\n}\r\n/**\r\n * Sets the applicable end user consent state for this web app across all gtag references once\r\n * Firebase Analytics is initialized.\r\n *\r\n * Use the {@link ConsentSettings} to specify individual consent type values. By default consent\r\n * types are set to \"granted\".\r\n * @public\r\n * @param consentSettings - Maps the applicable end user consent state for gtag.js.\r\n */\r\nfunction setConsent(consentSettings) {\r\n    // Check if reference to existing gtag function on window object exists\r\n    if (wrappedGtagFunction) {\r\n        wrappedGtagFunction(\"consent\" /* GtagCommand.CONSENT */, 'update', consentSettings);\r\n    }\r\n    else {\r\n        _setConsentDefaultForInit(consentSettings);\r\n    }\r\n}\n\nconst name = \"@firebase/analytics\";\nconst version = \"0.10.0\";\n\n/**\r\n * Firebase Analytics\r\n *\r\n * @packageDocumentation\r\n */\r\nfunction registerAnalytics() {\r\n    _registerComponent(new Component(ANALYTICS_TYPE, (container, { options: analyticsOptions }) => {\r\n        // getImmediate for FirebaseApp will always succeed\r\n        const app = container.getProvider('app').getImmediate();\r\n        const installations = container\r\n            .getProvider('installations-internal')\r\n            .getImmediate();\r\n        return factory(app, installations, analyticsOptions);\r\n    }, \"PUBLIC\" /* ComponentType.PUBLIC */));\r\n    _registerComponent(new Component('analytics-internal', internalFactory, \"PRIVATE\" /* ComponentType.PRIVATE */));\r\n    registerVersion(name, version);\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name, version, 'esm2017');\r\n    function internalFactory(container) {\r\n        try {\r\n            const analytics = container.getProvider(ANALYTICS_TYPE).getImmediate();\r\n            return {\r\n                logEvent: (eventName, eventParams, options) => logEvent(analytics, eventName, eventParams, options)\r\n            };\r\n        }\r\n        catch (e) {\r\n            throw ERROR_FACTORY.create(\"interop-component-reg-failed\" /* AnalyticsError.INTEROP_COMPONENT_REG_FAILED */, {\r\n                reason: e\r\n            });\r\n        }\r\n    }\r\n}\r\nregisterAnalytics();\n\nexport { getAnalytics, getGoogleAnalyticsClientId, initializeAnalytics, isSupported, logEvent, setAnalyticsCollectionEnabled, setConsent, setCurrentScreen, setDefaultEventParameters, setUserId, setUserProperties, settings };\n\n", "import * as i0 from '@angular/core';\nimport { Version, Injectable } from '@angular/core';\nimport { getApps } from 'firebase/app';\nimport { isSupported as isSupported$2 } from 'firebase/remote-config';\nimport { isSupported as isSupported$1 } from 'firebase/messaging';\nimport { isSupported } from 'firebase/analytics';\nimport { queueScheduler, asyncScheduler, Observable } from 'rxjs';\nimport { tap, observeOn, subscribeOn } from 'rxjs/operators';\nconst VERSION = new Version('7.2.0');\nconst isAnalyticsSupportedValueSymbol = '__angularfire_symbol__analyticsIsSupportedValue';\nconst isAnalyticsSupportedPromiseSymbol = '__angularfire_symbol__analyticsIsSupported';\nconst isRemoteConfigSupportedValueSymbol = '__angularfire_symbol__remoteConfigIsSupportedValue';\nconst isRemoteConfigSupportedPromiseSymbol = '__angularfire_symbol__remoteConfigIsSupported';\nconst isMessagingSupportedValueSymbol = '__angularfire_symbol__messagingIsSupportedValue';\nconst isMessagingSupportedPromiseSymbol = '__angularfire_symbol__messagingIsSupported';\nglobalThis[isAnalyticsSupportedPromiseSymbol] || (globalThis[isAnalyticsSupportedPromiseSymbol] = isSupported().then(it => globalThis[isAnalyticsSupportedValueSymbol] = it));\nglobalThis[isMessagingSupportedPromiseSymbol] || (globalThis[isMessagingSupportedPromiseSymbol] = isSupported$1().then(it => globalThis[isMessagingSupportedValueSymbol] = it));\nglobalThis[isRemoteConfigSupportedPromiseSymbol] || (globalThis[isRemoteConfigSupportedPromiseSymbol] = isSupported$2().then(it => globalThis[isRemoteConfigSupportedValueSymbol] = it));\nconst isSupportedError = module => `The APP_INITIALIZER that is \"making\" isSupported() sync for the sake of convenient DI has not resolved in this\ncontext. Rather than injecting ${module} in the constructor, first ensure that ${module} is supported by calling\n\\`await isSupported()\\`, then retrieve the instance from the injector manually \\`injector.get(${module})\\`.`;\nconst ɵisMessagingSupportedFactory = {\n  async: () => globalThis[isMessagingSupportedPromiseSymbol],\n  sync: () => {\n    const ret = globalThis[isMessagingSupportedValueSymbol];\n    if (ret === undefined) {\n      throw new Error(isSupportedError('Messaging'));\n    }\n    return ret;\n  }\n};\nconst ɵisRemoteConfigSupportedFactory = {\n  async: () => globalThis[isRemoteConfigSupportedPromiseSymbol],\n  sync: () => {\n    const ret = globalThis[isRemoteConfigSupportedValueSymbol];\n    if (ret === undefined) {\n      throw new Error(isSupportedError('RemoteConfig'));\n    }\n    return ret;\n  }\n};\nconst ɵisAnalyticsSupportedFactory = {\n  async: () => globalThis[isAnalyticsSupportedPromiseSymbol],\n  sync: () => {\n    const ret = globalThis[isAnalyticsSupportedValueSymbol];\n    if (ret === undefined) {\n      throw new Error(isSupportedError('Analytics'));\n    }\n    return ret;\n  }\n};\nfunction ɵgetDefaultInstanceOf(identifier, provided, defaultApp) {\n  if (provided) {\n    // Was provide* only called once? If so grab that\n    if (provided.length === 1) {\n      return provided[0];\n    }\n    const providedUsingDefaultApp = provided.filter(it => it.app === defaultApp);\n    // Was provide* only called once, using the default app? If so use that\n    if (providedUsingDefaultApp.length === 1) {\n      return providedUsingDefaultApp[0];\n    }\n  }\n  // Grab the default instance from the defaultApp\n  const defaultAppWithContainer = defaultApp;\n  const provider = defaultAppWithContainer.container.getProvider(identifier);\n  return provider.getImmediate({\n    optional: true\n  });\n}\nconst ɵgetAllInstancesOf = (identifier, app) => {\n  const apps = app ? [app] : getApps();\n  const instances = [];\n  apps.forEach(app => {\n    const provider = app.container.getProvider(identifier);\n    provider.instances.forEach(instance => {\n      if (!instances.includes(instance)) {\n        instances.push(instance);\n      }\n    });\n  });\n  return instances;\n};\nfunction noop() {}\n/**\n * Schedules tasks so that they are invoked inside the Zone that is passed in the constructor.\n */\n// tslint:disable-next-line:class-name\nclass ɵZoneScheduler {\n  constructor(zone, delegate = queueScheduler) {\n    this.zone = zone;\n    this.delegate = delegate;\n  }\n  now() {\n    return this.delegate.now();\n  }\n  schedule(work, delay, state) {\n    const targetZone = this.zone;\n    // Wrap the specified work function to make sure that if nested scheduling takes place the\n    // work is executed in the correct zone\n    const workInZone = function (state) {\n      targetZone.runGuarded(() => {\n        work.apply(this, [state]);\n      });\n    };\n    // Scheduling itself needs to be run in zone to ensure setInterval calls for async scheduling are done\n    // inside the correct zone. This scheduler needs to schedule asynchronously always to ensure that\n    // firebase emissions are never synchronous. Specifying a delay causes issues with the queueScheduler delegate.\n    return this.delegate.schedule(workInZone, delay, state);\n  }\n}\nclass BlockUntilFirstOperator {\n  constructor(zone) {\n    this.zone = zone;\n    this.task = null;\n  }\n  call(subscriber, source) {\n    const unscheduleTask = this.unscheduleTask.bind(this);\n    this.task = this.zone.run(() => Zone.current.scheduleMacroTask('firebaseZoneBlock', noop, {}, noop, noop));\n    return source.pipe(tap({\n      next: unscheduleTask,\n      complete: unscheduleTask,\n      error: unscheduleTask\n    })).subscribe(subscriber).add(unscheduleTask);\n  }\n  unscheduleTask() {\n    // maybe this is a race condition, invoke in a timeout\n    // hold for 10ms while I try to figure out what is going on\n    setTimeout(() => {\n      if (this.task != null && this.task.state === 'scheduled') {\n        this.task.invoke();\n        this.task = null;\n      }\n    }, 10);\n  }\n}\n// tslint:disable-next-line:class-name\nclass ɵAngularFireSchedulers {\n  constructor(ngZone) {\n    this.ngZone = ngZone;\n    this.outsideAngular = ngZone.runOutsideAngular(() => new ɵZoneScheduler(Zone.current));\n    this.insideAngular = ngZone.run(() => new ɵZoneScheduler(Zone.current, asyncScheduler));\n    globalThis.ɵAngularFireScheduler || (globalThis.ɵAngularFireScheduler = this);\n  }\n}\nɵAngularFireSchedulers.ɵfac = function ɵAngularFireSchedulers_Factory(t) {\n  return new (t || ɵAngularFireSchedulers)(i0.ɵɵinject(i0.NgZone));\n};\nɵAngularFireSchedulers.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ɵAngularFireSchedulers,\n  factory: ɵAngularFireSchedulers.ɵfac,\n  providedIn: 'root'\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ɵAngularFireSchedulers, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i0.NgZone\n    }];\n  }, null);\n})();\nfunction getSchedulers() {\n  const schedulers = globalThis.ɵAngularFireScheduler;\n  if (!schedulers) {\n    throw new Error(`Either AngularFireModule has not been provided in your AppModule (this can be done manually or implictly using\nprovideFirebaseApp) or you're calling an AngularFire method outside of an NgModule (which is not supported).`);\n  }\n  return schedulers;\n}\nfunction runOutsideAngular(fn) {\n  return getSchedulers().ngZone.runOutsideAngular(() => fn());\n}\nfunction run(fn) {\n  return getSchedulers().ngZone.run(() => fn());\n}\nfunction observeOutsideAngular(obs$) {\n  return obs$.pipe(observeOn(getSchedulers().outsideAngular));\n}\nfunction observeInsideAngular(obs$) {\n  return obs$.pipe(observeOn(getSchedulers().insideAngular));\n}\nfunction keepUnstableUntilFirst(obs$) {\n  const scheduler = getSchedulers();\n  return ɵkeepUnstableUntilFirstFactory(getSchedulers())(obs$);\n}\n/**\n * Operator to block the zone until the first value has been emitted or the observable\n * has completed/errored. This is used to make sure that universal waits until the first\n * value from firebase but doesn't block the zone forever since the firebase subscription\n * is still alive.\n */\nfunction ɵkeepUnstableUntilFirstFactory(schedulers) {\n  return function keepUnstableUntilFirst(obs$) {\n    obs$ = obs$.lift(new BlockUntilFirstOperator(schedulers.ngZone));\n    return obs$.pipe(\n    // Run the subscribe body outside of Angular (e.g. calling Firebase SDK to add a listener to a change event)\n    subscribeOn(schedulers.outsideAngular),\n    // Run operators inside the angular zone (e.g. side effects via tap())\n    observeOn(schedulers.insideAngular)\n    // INVESTIGATE https://github.com/angular/angularfire/pull/2315\n    // share()\n    );\n  };\n}\nconst zoneWrapFn = (it, macrotask) => {\n  const _this = this;\n  // function() is needed for the arguments object\n  // tslint:disable-next-line:only-arrow-functions\n  return function () {\n    if (macrotask) {\n      setTimeout(() => {\n        if (macrotask.state === 'scheduled') {\n          macrotask.invoke();\n        }\n      }, 10);\n    }\n    return run(() => it.apply(_this, arguments));\n  };\n};\nconst ɵzoneWrap = (it, blockUntilFirst) => {\n  // function() is needed for the arguments object\n  // tslint:disable-next-line:only-arrow-functions\n  return function () {\n    let macrotask;\n    // if this is a callback function, e.g, onSnapshot, we should create a microtask and invoke it\n    // only once one of the callback functions is tripped.\n    for (let i = 0; i < arguments.length; i++) {\n      if (typeof arguments[i] === 'function') {\n        if (blockUntilFirst) {\n          macrotask || (macrotask = run(() => Zone.current.scheduleMacroTask('firebaseZoneBlock', noop, {}, noop, noop)));\n        }\n        // TODO create a microtask to track callback functions\n        arguments[i] = zoneWrapFn(arguments[i], macrotask);\n      }\n    }\n    const ret = runOutsideAngular(() => it.apply(this, arguments));\n    if (!blockUntilFirst) {\n      if (ret instanceof Observable) {\n        const schedulers = getSchedulers();\n        return ret.pipe(subscribeOn(schedulers.outsideAngular), observeOn(schedulers.insideAngular));\n      } else {\n        return run(() => ret);\n      }\n    }\n    if (ret instanceof Observable) {\n      return ret.pipe(keepUnstableUntilFirst);\n    } else if (ret instanceof Promise) {\n      return run(() => new Promise((resolve, reject) => ret.then(it => run(() => resolve(it)), reason => run(() => reject(reason)))));\n    } else if (typeof ret === 'function' && macrotask) {\n      // Handle unsubscribe\n      // function() is needed for the arguments object\n      // tslint:disable-next-line:only-arrow-functions\n      return function () {\n        setTimeout(() => {\n          if (macrotask && macrotask.state === 'scheduled') {\n            macrotask.invoke();\n          }\n        }, 10);\n        return ret.apply(this, arguments);\n      };\n    } else {\n      // TODO how do we handle storage uploads in Zone? and other stuff with cancel() etc?\n      return run(() => ret);\n    }\n  };\n};\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { VERSION, keepUnstableUntilFirst, observeInsideAngular, observeOutsideAngular, ɵAngularFireSchedulers, ɵZoneScheduler, ɵgetAllInstancesOf, ɵgetDefaultInstanceOf, ɵisAnalyticsSupportedFactory, ɵisMessagingSupportedFactory, ɵisRemoteConfigSupportedFactory, ɵkeepUnstableUntilFirstFactory, ɵzoneWrap };\n", "import { getApps as getApps$1, getApp as getApp$1, registerVersion as registerVersion$1, deleteApp as deleteApp$1, initializeApp as initializeApp$1, onLog as onLog$1, setLogLevel as setLogLevel$1 } from 'firebase/app';\nexport * from 'firebase/app';\nimport { timer, from } from 'rxjs';\nimport { concatMap, distinct } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Optional, VERSION as VERSION$1, PLATFORM_ID, NgModule, Inject, NgZone, Injector } from '@angular/core';\nimport { VERSION, ɵAngularFireSchedulers, ɵzoneWrap } from '@angular/fire';\nclass FirebaseApp {\n  constructor(app) {\n    return app;\n  }\n}\nclass FirebaseApps {\n  constructor() {\n    return getApps$1();\n  }\n}\nconst firebaseApp$ = timer(0, 300).pipe(concatMap(() => from(getApps$1())), distinct());\nfunction defaultFirebaseAppFactory(provided) {\n  // Use the provided app, if there is only one, otherwise fetch the default app\n  if (provided && provided.length === 1) {\n    return provided[0];\n  }\n  return new FirebaseApp(getApp$1());\n}\n// With FIREBASE_APPS I wanted to capture the default app instance, if it is initialized by\n// the reserved URL; ɵPROVIDED_FIREBASE_APPS is not for public consumption and serves to ensure that all\n// provideFirebaseApp(...) calls are satisfied before FirebaseApp$ or FirebaseApp is resolved\nconst PROVIDED_FIREBASE_APPS = new InjectionToken('angularfire2._apps');\n// Injecting FirebaseApp will now only inject the default Firebase App\n// this allows allows beginners to import /__/firebase/init.js to auto initialize Firebase App\n// from the reserved URL.\nconst DEFAULT_FIREBASE_APP_PROVIDER = {\n  provide: FirebaseApp,\n  useFactory: defaultFirebaseAppFactory,\n  deps: [[new Optional(), PROVIDED_FIREBASE_APPS]]\n};\nconst FIREBASE_APPS_PROVIDER = {\n  provide: FirebaseApps,\n  deps: [[new Optional(), PROVIDED_FIREBASE_APPS]]\n};\nfunction firebaseAppFactory(fn) {\n  return (zone, injector) => {\n    const app = zone.runOutsideAngular(() => fn(injector));\n    return new FirebaseApp(app);\n  };\n}\nclass FirebaseAppModule {\n  // tslint:disable-next-line:ban-types\n  constructor(platformId) {\n    registerVersion$1('angularfire', VERSION.full, 'core');\n    registerVersion$1('angularfire', VERSION.full, 'app');\n    registerVersion$1('angular', VERSION$1.full, platformId.toString());\n  }\n}\nFirebaseAppModule.ɵfac = function FirebaseAppModule_Factory(t) {\n  return new (t || FirebaseAppModule)(i0.ɵɵinject(PLATFORM_ID));\n};\nFirebaseAppModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: FirebaseAppModule\n});\nFirebaseAppModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [DEFAULT_FIREBASE_APP_PROVIDER, FIREBASE_APPS_PROVIDER]\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FirebaseAppModule, [{\n    type: NgModule,\n    args: [{\n      providers: [DEFAULT_FIREBASE_APP_PROVIDER, FIREBASE_APPS_PROVIDER]\n    }]\n  }], function () {\n    return [{\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, null);\n})();\n// Calling initializeApp({ ... }, 'name') multiple times will add more FirebaseApps into the FIREBASE_APPS\n// injection scope. This allows developers to more easily work with multiple Firebase Applications. Downside\n// is that DI for app name and options doesn't really make sense anymore.\nfunction provideFirebaseApp(fn, ...deps) {\n  return {\n    ngModule: FirebaseAppModule,\n    providers: [{\n      provide: PROVIDED_FIREBASE_APPS,\n      useFactory: firebaseAppFactory(fn),\n      multi: true,\n      deps: [NgZone, Injector, ɵAngularFireSchedulers, ...deps]\n    }]\n  };\n}\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst deleteApp = ɵzoneWrap(deleteApp$1, true);\nconst getApp = ɵzoneWrap(getApp$1, true);\nconst getApps = ɵzoneWrap(getApps$1, true);\nconst initializeApp = ɵzoneWrap(initializeApp$1, true);\nconst onLog = ɵzoneWrap(onLog$1, true);\nconst registerVersion = ɵzoneWrap(registerVersion$1, true);\nconst setLogLevel = ɵzoneWrap(setLogLevel$1, true);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { FirebaseApp, FirebaseAppModule, FirebaseApps, deleteApp, firebaseApp$, getApp, getApps, initializeApp, onLog, provideFirebaseApp, registerVersion, setLogLevel };\n"],
  "mappings": "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",
  "names": ["name", "version", "target", "installationEntry", "name", "version", "ERROR_DESCRIPTION_MAP", "ERROR_FACTORY", "logger", "ERROR_FACTORY", "name", "version", "instanceOfAny", "idbProxyableTypes", "cursorAdvanceMethods", "getIdbProxyableTypes", "getCursorAdvanceMethods", "cursorRequestMap", "transactionDoneMap", "transactionStoreNamesMap", "transformCache", "reverseTransformCache", "promisifyRequest", "wrap", "cacheDonePromiseForTransaction", "idbProxyTraps", "replaceTraps", "wrapFunction", "unwrap", "transformCachableValue", "openDB", "name", "version", "wrap", "readMethods", "writeMethods", "cachedMethods", "getMethod", "target", "replaceTraps", "MessageType", "db", "openDB", "DATABASE_NAME", "DATABASE_VERSION", "OBJECT_STORE_NAME", "dbPromise", "getDbPromise", "getKey", "ERROR_FACTORY", "getHeaders", "extractAppConfig", "getMissingValueError", "name", "version", "ERROR_FACTORY", "dataLayerName", "initializationPromisesMap", "dynamicConfigPromisesList", "measurementIdToAppId", "getHeaders", "setAbortableTimeout", "isRetriableError", "ERROR_FACTORY", "dynamicConfigPromisesList", "measurementIdToAppId", "dataLayerName", "ERROR_FACTORY", "isSupported", "name", "version", "internalFactory", "ERROR_FACTORY", "VERSION", "isSupported", "app", "state", "keepUnstableUntilFirst", "it", "VERSION", "deleteApp", "getApp", "getApps", "initializeApp", "onLog", "registerVersion", "setLogLevel"]
}
